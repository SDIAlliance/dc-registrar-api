# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nadiki_registrar.models.base_model_ import Model
from nadiki_registrar.models.facility_time_series_data_point_tags import FacilityTimeSeriesDataPointTags
from nadiki_registrar import util

from nadiki_registrar.models.facility_time_series_data_point_tags import FacilityTimeSeriesDataPointTags  # noqa: E501

class FacilityTimeSeriesDataPoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, measurement=None, field=None, granularity_seconds=30, tags=None):  # noqa: E501
        """FacilityTimeSeriesDataPoint - a model defined in OpenAPI

        :param measurement: The measurement of this FacilityTimeSeriesDataPoint.  # noqa: E501
        :type measurement: str
        :param field: The field of this FacilityTimeSeriesDataPoint.  # noqa: E501
        :type field: str
        :param granularity_seconds: The granularity_seconds of this FacilityTimeSeriesDataPoint.  # noqa: E501
        :type granularity_seconds: int
        :param tags: The tags of this FacilityTimeSeriesDataPoint.  # noqa: E501
        :type tags: FacilityTimeSeriesDataPointTags
        """
        self.openapi_types = {
            'measurement': str,
            'field': str,
            'granularity_seconds': int,
            'tags': FacilityTimeSeriesDataPointTags
        }

        self.attribute_map = {
            'measurement': 'measurement',
            'field': 'field',
            'granularity_seconds': 'granularitySeconds',
            'tags': 'tags'
        }

        self._measurement = measurement
        self._field = field
        self._granularity_seconds = granularity_seconds
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'FacilityTimeSeriesDataPoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FacilityTimeSeriesDataPoint of this FacilityTimeSeriesDataPoint.  # noqa: E501
        :rtype: FacilityTimeSeriesDataPoint
        """
        return util.deserialize_model(dikt, cls)

    @property
    def measurement(self):
        """Gets the measurement of this FacilityTimeSeriesDataPoint.

        Name of the Influx measurement  # noqa: E501

        :return: The measurement of this FacilityTimeSeriesDataPoint.
        :rtype: str
        """
        return self._measurement

    @measurement.setter
    def measurement(self, measurement):
        """Sets the measurement of this FacilityTimeSeriesDataPoint.

        Name of the Influx measurement  # noqa: E501

        :param measurement: The measurement of this FacilityTimeSeriesDataPoint.
        :type measurement: str
        """
        allowed_values = ["facility", "rack", "server"]  # noqa: E501
        if measurement not in allowed_values:
            raise ValueError(
                "Invalid value for `measurement` ({0}), must be one of {1}"
                .format(measurement, allowed_values)
            )

        self._measurement = measurement

    @property
    def field(self):
        """Gets the field of this FacilityTimeSeriesDataPoint.

        Metric name with unit suffix  # noqa: E501

        :return: The field of this FacilityTimeSeriesDataPoint.
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this FacilityTimeSeriesDataPoint.

        Metric name with unit suffix  # noqa: E501

        :param field: The field of this FacilityTimeSeriesDataPoint.
        :type field: str
        """
        allowed_values = ["heatpump_avg_watts", "office_avg_watts", "dc_water_usage_cubic_meters", "office_water_usage_cubic_meters", "total_generator_avg_watts", "generator_load_factor_ratio", "grid_transformers_avg_watts", "onsite_renewable_energy_avg_watts", "it_power_usage_level1_avg_watts", "it_power_usage_level2_avg_watts", "renewable_energy_certificates_watts", "grid_emission_factor_grams", "backup_emission_factor_grams", "electricity_source", "pue_1_ratio", "pue_2_ratio"]  # noqa: E501
        if field not in allowed_values:
            raise ValueError(
                "Invalid value for `field` ({0}), must be one of {1}"
                .format(field, allowed_values)
            )

        self._field = field

    @property
    def granularity_seconds(self):
        """Gets the granularity_seconds of this FacilityTimeSeriesDataPoint.

        Time series data granularity in seconds  # noqa: E501

        :return: The granularity_seconds of this FacilityTimeSeriesDataPoint.
        :rtype: int
        """
        return self._granularity_seconds

    @granularity_seconds.setter
    def granularity_seconds(self, granularity_seconds):
        """Sets the granularity_seconds of this FacilityTimeSeriesDataPoint.

        Time series data granularity in seconds  # noqa: E501

        :param granularity_seconds: The granularity_seconds of this FacilityTimeSeriesDataPoint.
        :type granularity_seconds: int
        """
        if granularity_seconds is None:
            raise ValueError("Invalid value for `granularity_seconds`, must not be `None`")  # noqa: E501

        self._granularity_seconds = granularity_seconds

    @property
    def tags(self):
        """Gets the tags of this FacilityTimeSeriesDataPoint.


        :return: The tags of this FacilityTimeSeriesDataPoint.
        :rtype: FacilityTimeSeriesDataPointTags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this FacilityTimeSeriesDataPoint.


        :param tags: The tags of this FacilityTimeSeriesDataPoint.
        :type tags: FacilityTimeSeriesDataPointTags
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags
