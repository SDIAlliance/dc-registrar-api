# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nadiki_registrar.models.base_model_ import Model
from nadiki_registrar import util


class FacilityMetricsQueryResponseMetricsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, value=None, unit=None, granularity_seconds=None):  # noqa: E501
        """FacilityMetricsQueryResponseMetricsInner - a model defined in OpenAPI

        :param name: The name of this FacilityMetricsQueryResponseMetricsInner.  # noqa: E501
        :type name: str
        :param value: The value of this FacilityMetricsQueryResponseMetricsInner.  # noqa: E501
        :type value: float
        :param unit: The unit of this FacilityMetricsQueryResponseMetricsInner.  # noqa: E501
        :type unit: str
        :param granularity_seconds: The granularity_seconds of this FacilityMetricsQueryResponseMetricsInner.  # noqa: E501
        :type granularity_seconds: int
        """
        self.openapi_types = {
            'name': str,
            'value': float,
            'unit': str,
            'granularity_seconds': int
        }

        self.attribute_map = {
            'name': 'name',
            'value': 'value',
            'unit': 'unit',
            'granularity_seconds': 'granularitySeconds'
        }

        self._name = name
        self._value = value
        self._unit = unit
        self._granularity_seconds = granularity_seconds

    @classmethod
    def from_dict(cls, dikt) -> 'FacilityMetricsQueryResponseMetricsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FacilityMetricsQueryResponse_metrics_inner of this FacilityMetricsQueryResponseMetricsInner.  # noqa: E501
        :rtype: FacilityMetricsQueryResponseMetricsInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this FacilityMetricsQueryResponseMetricsInner.

        Name of the metric  # noqa: E501

        :return: The name of this FacilityMetricsQueryResponseMetricsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FacilityMetricsQueryResponseMetricsInner.

        Name of the metric  # noqa: E501

        :param name: The name of this FacilityMetricsQueryResponseMetricsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def value(self):
        """Gets the value of this FacilityMetricsQueryResponseMetricsInner.

        Aggregated value over the time period  # noqa: E501

        :return: The value of this FacilityMetricsQueryResponseMetricsInner.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FacilityMetricsQueryResponseMetricsInner.

        Aggregated value over the time period  # noqa: E501

        :param value: The value of this FacilityMetricsQueryResponseMetricsInner.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def unit(self):
        """Gets the unit of this FacilityMetricsQueryResponseMetricsInner.

        Unit of the metric  # noqa: E501

        :return: The unit of this FacilityMetricsQueryResponseMetricsInner.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this FacilityMetricsQueryResponseMetricsInner.

        Unit of the metric  # noqa: E501

        :param unit: The unit of this FacilityMetricsQueryResponseMetricsInner.
        :type unit: str
        """
        allowed_values = ["Time", "Temperature", "Length", "Bytes", "Percent", "Voltage", "Electric current", "Energy", "Power", "Mass", "Value"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit

    @property
    def granularity_seconds(self):
        """Gets the granularity_seconds of this FacilityMetricsQueryResponseMetricsInner.

        Original granularity of the data points in seconds  # noqa: E501

        :return: The granularity_seconds of this FacilityMetricsQueryResponseMetricsInner.
        :rtype: int
        """
        return self._granularity_seconds

    @granularity_seconds.setter
    def granularity_seconds(self, granularity_seconds):
        """Sets the granularity_seconds of this FacilityMetricsQueryResponseMetricsInner.

        Original granularity of the data points in seconds  # noqa: E501

        :param granularity_seconds: The granularity_seconds of this FacilityMetricsQueryResponseMetricsInner.
        :type granularity_seconds: int
        """
        if granularity_seconds is None:
            raise ValueError("Invalid value for `granularity_seconds`, must not be `None`")  # noqa: E501

        self._granularity_seconds = granularity_seconds
