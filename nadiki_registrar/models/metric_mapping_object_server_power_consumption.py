# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nadiki_registrar.models.base_model_ import Model
from nadiki_registrar.models.metric_mapping_configuration import MetricMappingConfiguration
from nadiki_registrar import util

from nadiki_registrar.models.metric_mapping_configuration import MetricMappingConfiguration  # noqa: E501

class MetricMappingObjectServerPowerConsumption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input_metric_unit=None, input_metric_type=None, input_metric_name=None, measurement_interval=None, device_name=None):  # noqa: E501
        """MetricMappingObjectServerPowerConsumption - a model defined in OpenAPI

        :param input_metric_unit: The input_metric_unit of this MetricMappingObjectServerPowerConsumption.  # noqa: E501
        :type input_metric_unit: str
        :param input_metric_type: The input_metric_type of this MetricMappingObjectServerPowerConsumption.  # noqa: E501
        :type input_metric_type: str
        :param input_metric_name: The input_metric_name of this MetricMappingObjectServerPowerConsumption.  # noqa: E501
        :type input_metric_name: str
        :param measurement_interval: The measurement_interval of this MetricMappingObjectServerPowerConsumption.  # noqa: E501
        :type measurement_interval: int
        :param device_name: The device_name of this MetricMappingObjectServerPowerConsumption.  # noqa: E501
        :type device_name: str
        """
        self.openapi_types = {
            'input_metric_unit': str,
            'input_metric_type': str,
            'input_metric_name': str,
            'measurement_interval': int,
            'device_name': str
        }

        self.attribute_map = {
            'input_metric_unit': 'input_metric_unit',
            'input_metric_type': 'input_metric_type',
            'input_metric_name': 'input_metric_name',
            'measurement_interval': 'measurement_interval',
            'device_name': 'device_name'
        }

        self._input_metric_unit = input_metric_unit
        self._input_metric_type = input_metric_type
        self._input_metric_name = input_metric_name
        self._measurement_interval = measurement_interval
        self._device_name = device_name

    @classmethod
    def from_dict(cls, dikt) -> 'MetricMappingObjectServerPowerConsumption':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MetricMappingObject_server_power_consumption of this MetricMappingObjectServerPowerConsumption.  # noqa: E501
        :rtype: MetricMappingObjectServerPowerConsumption
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input_metric_unit(self):
        """Gets the input_metric_unit of this MetricMappingObjectServerPowerConsumption.

        Unit of the input metric  # noqa: E501

        :return: The input_metric_unit of this MetricMappingObjectServerPowerConsumption.
        :rtype: str
        """
        return self._input_metric_unit

    @input_metric_unit.setter
    def input_metric_unit(self, input_metric_unit):
        """Sets the input_metric_unit of this MetricMappingObjectServerPowerConsumption.

        Unit of the input metric  # noqa: E501

        :param input_metric_unit: The input_metric_unit of this MetricMappingObjectServerPowerConsumption.
        :type input_metric_unit: str
        """
        allowed_values = ["Watt", "Seconds", "Percentage", "Fraction", "Bytes"]  # noqa: E501
        if input_metric_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `input_metric_unit` ({0}), must be one of {1}"
                .format(input_metric_unit, allowed_values)
            )

        self._input_metric_unit = input_metric_unit

    @property
    def input_metric_type(self):
        """Gets the input_metric_type of this MetricMappingObjectServerPowerConsumption.

        Type of metric (Gauge for current values, Counter for cumulative values)  # noqa: E501

        :return: The input_metric_type of this MetricMappingObjectServerPowerConsumption.
        :rtype: str
        """
        return self._input_metric_type

    @input_metric_type.setter
    def input_metric_type(self, input_metric_type):
        """Sets the input_metric_type of this MetricMappingObjectServerPowerConsumption.

        Type of metric (Gauge for current values, Counter for cumulative values)  # noqa: E501

        :param input_metric_type: The input_metric_type of this MetricMappingObjectServerPowerConsumption.
        :type input_metric_type: str
        """
        allowed_values = ["Gauge", "Counter"]  # noqa: E501
        if input_metric_type not in allowed_values:
            raise ValueError(
                "Invalid value for `input_metric_type` ({0}), must be one of {1}"
                .format(input_metric_type, allowed_values)
            )

        self._input_metric_type = input_metric_type

    @property
    def input_metric_name(self):
        """Gets the input_metric_name of this MetricMappingObjectServerPowerConsumption.

        Name of the input metric as it appears in the source system  # noqa: E501

        :return: The input_metric_name of this MetricMappingObjectServerPowerConsumption.
        :rtype: str
        """
        return self._input_metric_name

    @input_metric_name.setter
    def input_metric_name(self, input_metric_name):
        """Sets the input_metric_name of this MetricMappingObjectServerPowerConsumption.

        Name of the input metric as it appears in the source system  # noqa: E501

        :param input_metric_name: The input_metric_name of this MetricMappingObjectServerPowerConsumption.
        :type input_metric_name: str
        """
        if input_metric_name is None:
            raise ValueError("Invalid value for `input_metric_name`, must not be `None`")  # noqa: E501

        self._input_metric_name = input_metric_name

    @property
    def measurement_interval(self):
        """Gets the measurement_interval of this MetricMappingObjectServerPowerConsumption.

        Measurement interval in seconds  # noqa: E501

        :return: The measurement_interval of this MetricMappingObjectServerPowerConsumption.
        :rtype: int
        """
        return self._measurement_interval

    @measurement_interval.setter
    def measurement_interval(self, measurement_interval):
        """Sets the measurement_interval of this MetricMappingObjectServerPowerConsumption.

        Measurement interval in seconds  # noqa: E501

        :param measurement_interval: The measurement_interval of this MetricMappingObjectServerPowerConsumption.
        :type measurement_interval: int
        """
        if measurement_interval is None:
            raise ValueError("Invalid value for `measurement_interval`, must not be `None`")  # noqa: E501
        if measurement_interval is not None and measurement_interval < 1:  # noqa: E501
            raise ValueError("Invalid value for `measurement_interval`, must be a value greater than or equal to `1`")  # noqa: E501

        self._measurement_interval = measurement_interval

    @property
    def device_name(self):
        """Gets the device_name of this MetricMappingObjectServerPowerConsumption.

        Device name, only used when an array is passed to the target metric  # noqa: E501

        :return: The device_name of this MetricMappingObjectServerPowerConsumption.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this MetricMappingObjectServerPowerConsumption.

        Device name, only used when an array is passed to the target metric  # noqa: E501

        :param device_name: The device_name of this MetricMappingObjectServerPowerConsumption.
        :type device_name: str
        """

        self._device_name = device_name
