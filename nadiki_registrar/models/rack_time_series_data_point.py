# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nadiki_registrar.models.base_model_ import Model
from nadiki_registrar.models.rack_time_series_data_point_labels import RackTimeSeriesDataPointLabels
import re
from nadiki_registrar import util

from nadiki_registrar.models.rack_time_series_data_point_labels import RackTimeSeriesDataPointLabels  # noqa: E501
import re  # noqa: E501

class RackTimeSeriesDataPoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, unit=None, granularity_seconds=30, labels=None):  # noqa: E501
        """RackTimeSeriesDataPoint - a model defined in OpenAPI

        :param name: The name of this RackTimeSeriesDataPoint.  # noqa: E501
        :type name: str
        :param unit: The unit of this RackTimeSeriesDataPoint.  # noqa: E501
        :type unit: str
        :param granularity_seconds: The granularity_seconds of this RackTimeSeriesDataPoint.  # noqa: E501
        :type granularity_seconds: int
        :param labels: The labels of this RackTimeSeriesDataPoint.  # noqa: E501
        :type labels: RackTimeSeriesDataPointLabels
        """
        self.openapi_types = {
            'name': str,
            'unit': str,
            'granularity_seconds': int,
            'labels': RackTimeSeriesDataPointLabels
        }

        self.attribute_map = {
            'name': 'name',
            'unit': 'unit',
            'granularity_seconds': 'granularitySeconds',
            'labels': 'labels'
        }

        self._name = name
        self._unit = unit
        self._granularity_seconds = granularity_seconds
        self._labels = labels

    @classmethod
    def from_dict(cls, dikt) -> 'RackTimeSeriesDataPoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RackTimeSeriesDataPoint of this RackTimeSeriesDataPoint.  # noqa: E501
        :rtype: RackTimeSeriesDataPoint
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this RackTimeSeriesDataPoint.

        Prometheus metric name with unit suffix. For PDU metrics,  the name must follow the pattern 'pdu_N_energy_consumption_joules'  where N is the PDU number (1 to number_of_pdus)   # noqa: E501

        :return: The name of this RackTimeSeriesDataPoint.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RackTimeSeriesDataPoint.

        Prometheus metric name with unit suffix. For PDU metrics,  the name must follow the pattern 'pdu_N_energy_consumption_joules'  where N is the PDU number (1 to number_of_pdus)   # noqa: E501

        :param name: The name of this RackTimeSeriesDataPoint.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and not re.search(r'^(pdu_[1-9][0-9]*_energy_consumption_joules|inlet_temperature_celsius|outlet_temperature_celsius)$', name):  # noqa: E501
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^(pdu_[1-9][0-9]*_energy_consumption_joules|inlet_temperature_celsius|outlet_temperature_celsius)$/`")  # noqa: E501

        self._name = name

    @property
    def unit(self):
        """Gets the unit of this RackTimeSeriesDataPoint.

        Prometheus metric family  # noqa: E501

        :return: The unit of this RackTimeSeriesDataPoint.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this RackTimeSeriesDataPoint.

        Prometheus metric family  # noqa: E501

        :param unit: The unit of this RackTimeSeriesDataPoint.
        :type unit: str
        """
        allowed_values = ["Time", "Temperature", "Length", "Bytes", "Percent", "Voltage", "Electric current", "Energy", "Power", "Mass"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit

    @property
    def granularity_seconds(self):
        """Gets the granularity_seconds of this RackTimeSeriesDataPoint.

        Time series data granularity in seconds  # noqa: E501

        :return: The granularity_seconds of this RackTimeSeriesDataPoint.
        :rtype: int
        """
        return self._granularity_seconds

    @granularity_seconds.setter
    def granularity_seconds(self, granularity_seconds):
        """Sets the granularity_seconds of this RackTimeSeriesDataPoint.

        Time series data granularity in seconds  # noqa: E501

        :param granularity_seconds: The granularity_seconds of this RackTimeSeriesDataPoint.
        :type granularity_seconds: int
        """
        if granularity_seconds is None:
            raise ValueError("Invalid value for `granularity_seconds`, must not be `None`")  # noqa: E501

        self._granularity_seconds = granularity_seconds

    @property
    def labels(self):
        """Gets the labels of this RackTimeSeriesDataPoint.


        :return: The labels of this RackTimeSeriesDataPoint.
        :rtype: RackTimeSeriesDataPointLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this RackTimeSeriesDataPoint.


        :param labels: The labels of this RackTimeSeriesDataPoint.
        :type labels: RackTimeSeriesDataPointLabels
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")  # noqa: E501

        self._labels = labels
