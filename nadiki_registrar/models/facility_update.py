# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nadiki_registrar.models.base_model_ import Model
from nadiki_registrar.models.facility_create_cooling_fluids_inner import FacilityCreateCoolingFluidsInner
from nadiki_registrar.models.location import Location
from nadiki_registrar import util

from nadiki_registrar.models.facility_create_cooling_fluids_inner import FacilityCreateCoolingFluidsInner  # noqa: E501
from nadiki_registrar.models.location import Location  # noqa: E501

class FacilityUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location=None, embedded_ghg_emissions_facility=None, lifetime_facility=15, embedded_ghg_emissions_assets=None, lifetime_assets=10, cooling_fluids=None, maintenance_hours_generator=None, installed_capacity=None, grid_power_feeds=3, design_pue=1.4, tier_level=3, white_space_floors=1, total_space=None, white_space=None, description=None):  # noqa: E501
        """FacilityUpdate - a model defined in OpenAPI

        :param location: The location of this FacilityUpdate.  # noqa: E501
        :type location: Location
        :param embedded_ghg_emissions_facility: The embedded_ghg_emissions_facility of this FacilityUpdate.  # noqa: E501
        :type embedded_ghg_emissions_facility: float
        :param lifetime_facility: The lifetime_facility of this FacilityUpdate.  # noqa: E501
        :type lifetime_facility: int
        :param embedded_ghg_emissions_assets: The embedded_ghg_emissions_assets of this FacilityUpdate.  # noqa: E501
        :type embedded_ghg_emissions_assets: float
        :param lifetime_assets: The lifetime_assets of this FacilityUpdate.  # noqa: E501
        :type lifetime_assets: int
        :param cooling_fluids: The cooling_fluids of this FacilityUpdate.  # noqa: E501
        :type cooling_fluids: List[FacilityCreateCoolingFluidsInner]
        :param maintenance_hours_generator: The maintenance_hours_generator of this FacilityUpdate.  # noqa: E501
        :type maintenance_hours_generator: float
        :param installed_capacity: The installed_capacity of this FacilityUpdate.  # noqa: E501
        :type installed_capacity: float
        :param grid_power_feeds: The grid_power_feeds of this FacilityUpdate.  # noqa: E501
        :type grid_power_feeds: int
        :param design_pue: The design_pue of this FacilityUpdate.  # noqa: E501
        :type design_pue: float
        :param tier_level: The tier_level of this FacilityUpdate.  # noqa: E501
        :type tier_level: int
        :param white_space_floors: The white_space_floors of this FacilityUpdate.  # noqa: E501
        :type white_space_floors: int
        :param total_space: The total_space of this FacilityUpdate.  # noqa: E501
        :type total_space: float
        :param white_space: The white_space of this FacilityUpdate.  # noqa: E501
        :type white_space: float
        :param description: The description of this FacilityUpdate.  # noqa: E501
        :type description: str
        """
        self.openapi_types = {
            'location': Location,
            'embedded_ghg_emissions_facility': float,
            'lifetime_facility': int,
            'embedded_ghg_emissions_assets': float,
            'lifetime_assets': int,
            'cooling_fluids': List[FacilityCreateCoolingFluidsInner],
            'maintenance_hours_generator': float,
            'installed_capacity': float,
            'grid_power_feeds': int,
            'design_pue': float,
            'tier_level': int,
            'white_space_floors': int,
            'total_space': float,
            'white_space': float,
            'description': str
        }

        self.attribute_map = {
            'location': 'location',
            'embedded_ghg_emissions_facility': 'embeddedGhgEmissionsFacility',
            'lifetime_facility': 'lifetimeFacility',
            'embedded_ghg_emissions_assets': 'embeddedGhgEmissionsAssets',
            'lifetime_assets': 'lifetimeAssets',
            'cooling_fluids': 'coolingFluids',
            'maintenance_hours_generator': 'maintenanceHoursGenerator',
            'installed_capacity': 'installedCapacity',
            'grid_power_feeds': 'gridPowerFeeds',
            'design_pue': 'designPue',
            'tier_level': 'tierLevel',
            'white_space_floors': 'whiteSpaceFloors',
            'total_space': 'totalSpace',
            'white_space': 'whiteSpace',
            'description': 'description'
        }

        self._location = location
        self._embedded_ghg_emissions_facility = embedded_ghg_emissions_facility
        self._lifetime_facility = lifetime_facility
        self._embedded_ghg_emissions_assets = embedded_ghg_emissions_assets
        self._lifetime_assets = lifetime_assets
        self._cooling_fluids = cooling_fluids
        self._maintenance_hours_generator = maintenance_hours_generator
        self._installed_capacity = installed_capacity
        self._grid_power_feeds = grid_power_feeds
        self._design_pue = design_pue
        self._tier_level = tier_level
        self._white_space_floors = white_space_floors
        self._total_space = total_space
        self._white_space = white_space
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'FacilityUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FacilityUpdate of this FacilityUpdate.  # noqa: E501
        :rtype: FacilityUpdate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self):
        """Gets the location of this FacilityUpdate.


        :return: The location of this FacilityUpdate.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this FacilityUpdate.


        :param location: The location of this FacilityUpdate.
        :type location: Location
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def embedded_ghg_emissions_facility(self):
        """Gets the embedded_ghg_emissions_facility of this FacilityUpdate.

        Embodied carbon emissions from facility construction (CO2-eq)  # noqa: E501

        :return: The embedded_ghg_emissions_facility of this FacilityUpdate.
        :rtype: float
        """
        return self._embedded_ghg_emissions_facility

    @embedded_ghg_emissions_facility.setter
    def embedded_ghg_emissions_facility(self, embedded_ghg_emissions_facility):
        """Sets the embedded_ghg_emissions_facility of this FacilityUpdate.

        Embodied carbon emissions from facility construction (CO2-eq)  # noqa: E501

        :param embedded_ghg_emissions_facility: The embedded_ghg_emissions_facility of this FacilityUpdate.
        :type embedded_ghg_emissions_facility: float
        """

        self._embedded_ghg_emissions_facility = embedded_ghg_emissions_facility

    @property
    def lifetime_facility(self):
        """Gets the lifetime_facility of this FacilityUpdate.

        Expected lifetime of the facility in years  # noqa: E501

        :return: The lifetime_facility of this FacilityUpdate.
        :rtype: int
        """
        return self._lifetime_facility

    @lifetime_facility.setter
    def lifetime_facility(self, lifetime_facility):
        """Sets the lifetime_facility of this FacilityUpdate.

        Expected lifetime of the facility in years  # noqa: E501

        :param lifetime_facility: The lifetime_facility of this FacilityUpdate.
        :type lifetime_facility: int
        """
        if lifetime_facility is not None and lifetime_facility < 1:  # noqa: E501
            raise ValueError("Invalid value for `lifetime_facility`, must be a value greater than or equal to `1`")  # noqa: E501

        self._lifetime_facility = lifetime_facility

    @property
    def embedded_ghg_emissions_assets(self):
        """Gets the embedded_ghg_emissions_assets of this FacilityUpdate.

        Sum of GHG emissions embodied in assets  # noqa: E501

        :return: The embedded_ghg_emissions_assets of this FacilityUpdate.
        :rtype: float
        """
        return self._embedded_ghg_emissions_assets

    @embedded_ghg_emissions_assets.setter
    def embedded_ghg_emissions_assets(self, embedded_ghg_emissions_assets):
        """Sets the embedded_ghg_emissions_assets of this FacilityUpdate.

        Sum of GHG emissions embodied in assets  # noqa: E501

        :param embedded_ghg_emissions_assets: The embedded_ghg_emissions_assets of this FacilityUpdate.
        :type embedded_ghg_emissions_assets: float
        """

        self._embedded_ghg_emissions_assets = embedded_ghg_emissions_assets

    @property
    def lifetime_assets(self):
        """Gets the lifetime_assets of this FacilityUpdate.

        Expected average lifetime of assets in years  # noqa: E501

        :return: The lifetime_assets of this FacilityUpdate.
        :rtype: int
        """
        return self._lifetime_assets

    @lifetime_assets.setter
    def lifetime_assets(self, lifetime_assets):
        """Sets the lifetime_assets of this FacilityUpdate.

        Expected average lifetime of assets in years  # noqa: E501

        :param lifetime_assets: The lifetime_assets of this FacilityUpdate.
        :type lifetime_assets: int
        """
        if lifetime_assets is not None and lifetime_assets < 1:  # noqa: E501
            raise ValueError("Invalid value for `lifetime_assets`, must be a value greater than or equal to `1`")  # noqa: E501

        self._lifetime_assets = lifetime_assets

    @property
    def cooling_fluids(self):
        """Gets the cooling_fluids of this FacilityUpdate.


        :return: The cooling_fluids of this FacilityUpdate.
        :rtype: List[FacilityCreateCoolingFluidsInner]
        """
        return self._cooling_fluids

    @cooling_fluids.setter
    def cooling_fluids(self, cooling_fluids):
        """Sets the cooling_fluids of this FacilityUpdate.


        :param cooling_fluids: The cooling_fluids of this FacilityUpdate.
        :type cooling_fluids: List[FacilityCreateCoolingFluidsInner]
        """

        self._cooling_fluids = cooling_fluids

    @property
    def maintenance_hours_generator(self):
        """Gets the maintenance_hours_generator of this FacilityUpdate.

        Annual maintenance runtime hours for generators  # noqa: E501

        :return: The maintenance_hours_generator of this FacilityUpdate.
        :rtype: float
        """
        return self._maintenance_hours_generator

    @maintenance_hours_generator.setter
    def maintenance_hours_generator(self, maintenance_hours_generator):
        """Sets the maintenance_hours_generator of this FacilityUpdate.

        Annual maintenance runtime hours for generators  # noqa: E501

        :param maintenance_hours_generator: The maintenance_hours_generator of this FacilityUpdate.
        :type maintenance_hours_generator: float
        """

        self._maintenance_hours_generator = maintenance_hours_generator

    @property
    def installed_capacity(self):
        """Gets the installed_capacity of this FacilityUpdate.

        Installed/rated power capacity (watts)  # noqa: E501

        :return: The installed_capacity of this FacilityUpdate.
        :rtype: float
        """
        return self._installed_capacity

    @installed_capacity.setter
    def installed_capacity(self, installed_capacity):
        """Sets the installed_capacity of this FacilityUpdate.

        Installed/rated power capacity (watts)  # noqa: E501

        :param installed_capacity: The installed_capacity of this FacilityUpdate.
        :type installed_capacity: float
        """

        self._installed_capacity = installed_capacity

    @property
    def grid_power_feeds(self):
        """Gets the grid_power_feeds of this FacilityUpdate.

        Number of physical power feeds  # noqa: E501

        :return: The grid_power_feeds of this FacilityUpdate.
        :rtype: int
        """
        return self._grid_power_feeds

    @grid_power_feeds.setter
    def grid_power_feeds(self, grid_power_feeds):
        """Sets the grid_power_feeds of this FacilityUpdate.

        Number of physical power feeds  # noqa: E501

        :param grid_power_feeds: The grid_power_feeds of this FacilityUpdate.
        :type grid_power_feeds: int
        """
        if grid_power_feeds is not None and grid_power_feeds < 1:  # noqa: E501
            raise ValueError("Invalid value for `grid_power_feeds`, must be a value greater than or equal to `1`")  # noqa: E501

        self._grid_power_feeds = grid_power_feeds

    @property
    def design_pue(self):
        """Gets the design_pue of this FacilityUpdate.

        Design Power Usage Effectiveness  # noqa: E501

        :return: The design_pue of this FacilityUpdate.
        :rtype: float
        """
        return self._design_pue

    @design_pue.setter
    def design_pue(self, design_pue):
        """Sets the design_pue of this FacilityUpdate.

        Design Power Usage Effectiveness  # noqa: E501

        :param design_pue: The design_pue of this FacilityUpdate.
        :type design_pue: float
        """
        if design_pue is not None and design_pue < 1:  # noqa: E501
            raise ValueError("Invalid value for `design_pue`, must be a value greater than or equal to `1`")  # noqa: E501

        self._design_pue = design_pue

    @property
    def tier_level(self):
        """Gets the tier_level of this FacilityUpdate.

        Certified/rated tier level  # noqa: E501

        :return: The tier_level of this FacilityUpdate.
        :rtype: int
        """
        return self._tier_level

    @tier_level.setter
    def tier_level(self, tier_level):
        """Sets the tier_level of this FacilityUpdate.

        Certified/rated tier level  # noqa: E501

        :param tier_level: The tier_level of this FacilityUpdate.
        :type tier_level: int
        """
        allowed_values = [1, 2, 3, 4]  # noqa: E501
        if tier_level not in allowed_values:
            raise ValueError(
                "Invalid value for `tier_level` ({0}), must be one of {1}"
                .format(tier_level, allowed_values)
            )

        self._tier_level = tier_level

    @property
    def white_space_floors(self):
        """Gets the white_space_floors of this FacilityUpdate.

        Number of floors used for white space  # noqa: E501

        :return: The white_space_floors of this FacilityUpdate.
        :rtype: int
        """
        return self._white_space_floors

    @white_space_floors.setter
    def white_space_floors(self, white_space_floors):
        """Sets the white_space_floors of this FacilityUpdate.

        Number of floors used for white space  # noqa: E501

        :param white_space_floors: The white_space_floors of this FacilityUpdate.
        :type white_space_floors: int
        """
        if white_space_floors is not None and white_space_floors < 1:  # noqa: E501
            raise ValueError("Invalid value for `white_space_floors`, must be a value greater than or equal to `1`")  # noqa: E501

        self._white_space_floors = white_space_floors

    @property
    def total_space(self):
        """Gets the total_space of this FacilityUpdate.

        Total facility space (m2)  # noqa: E501

        :return: The total_space of this FacilityUpdate.
        :rtype: float
        """
        return self._total_space

    @total_space.setter
    def total_space(self, total_space):
        """Sets the total_space of this FacilityUpdate.

        Total facility space (m2)  # noqa: E501

        :param total_space: The total_space of this FacilityUpdate.
        :type total_space: float
        """

        self._total_space = total_space

    @property
    def white_space(self):
        """Gets the white_space of this FacilityUpdate.

        Total white space (m2)  # noqa: E501

        :return: The white_space of this FacilityUpdate.
        :rtype: float
        """
        return self._white_space

    @white_space.setter
    def white_space(self, white_space):
        """Sets the white_space of this FacilityUpdate.

        Total white space (m2)  # noqa: E501

        :param white_space: The white_space of this FacilityUpdate.
        :type white_space: float
        """

        self._white_space = white_space

    @property
    def description(self):
        """Gets the description of this FacilityUpdate.

        Textual description ob the facility for informational purposes  # noqa: E501

        :return: The description of this FacilityUpdate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FacilityUpdate.

        Textual description ob the facility for informational purposes  # noqa: E501

        :param description: The description of this FacilityUpdate.
        :type description: str
        """

        self._description = description
