# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nadiki_registrar.models.base_model_ import Model
from nadiki_registrar.models.rack_time_series_config import RackTimeSeriesConfig
from nadiki_registrar import util

from nadiki_registrar.models.rack_time_series_config import RackTimeSeriesConfig  # noqa: E501

class RackResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, facility_id=None, total_available_power=5, total_available_cooling_capacity=5, number_of_pdus=2, power_redundancy=2, product_passport=None, id=None, time_series_config=None, created_at=None, updated_at=None):  # noqa: E501
        """RackResponse - a model defined in OpenAPI

        :param facility_id: The facility_id of this RackResponse.  # noqa: E501
        :type facility_id: str
        :param total_available_power: The total_available_power of this RackResponse.  # noqa: E501
        :type total_available_power: float
        :param total_available_cooling_capacity: The total_available_cooling_capacity of this RackResponse.  # noqa: E501
        :type total_available_cooling_capacity: float
        :param number_of_pdus: The number_of_pdus of this RackResponse.  # noqa: E501
        :type number_of_pdus: int
        :param power_redundancy: The power_redundancy of this RackResponse.  # noqa: E501
        :type power_redundancy: int
        :param product_passport: The product_passport of this RackResponse.  # noqa: E501
        :type product_passport: object
        :param id: The id of this RackResponse.  # noqa: E501
        :type id: str
        :param time_series_config: The time_series_config of this RackResponse.  # noqa: E501
        :type time_series_config: RackTimeSeriesConfig
        :param created_at: The created_at of this RackResponse.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this RackResponse.  # noqa: E501
        :type updated_at: datetime
        """
        self.openapi_types = {
            'facility_id': str,
            'total_available_power': float,
            'total_available_cooling_capacity': float,
            'number_of_pdus': int,
            'power_redundancy': int,
            'product_passport': object,
            'id': str,
            'time_series_config': RackTimeSeriesConfig,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'facility_id': 'facility_id',
            'total_available_power': 'total_available_power',
            'total_available_cooling_capacity': 'total_available_cooling_capacity',
            'number_of_pdus': 'number_of_pdus',
            'power_redundancy': 'power_redundancy',
            'product_passport': 'product_passport',
            'id': 'id',
            'time_series_config': 'timeSeriesConfig',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt'
        }

        self._facility_id = facility_id
        self._total_available_power = total_available_power
        self._total_available_cooling_capacity = total_available_cooling_capacity
        self._number_of_pdus = number_of_pdus
        self._power_redundancy = power_redundancy
        self._product_passport = product_passport
        self._id = id
        self._time_series_config = time_series_config
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'RackResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RackResponse of this RackResponse.  # noqa: E501
        :rtype: RackResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def facility_id(self):
        """Gets the facility_id of this RackResponse.

        ID of the facility where the rack is located  # noqa: E501

        :return: The facility_id of this RackResponse.
        :rtype: str
        """
        return self._facility_id

    @facility_id.setter
    def facility_id(self, facility_id):
        """Sets the facility_id of this RackResponse.

        ID of the facility where the rack is located  # noqa: E501

        :param facility_id: The facility_id of this RackResponse.
        :type facility_id: str
        """
        if facility_id is None:
            raise ValueError("Invalid value for `facility_id`, must not be `None`")  # noqa: E501

        self._facility_id = facility_id

    @property
    def total_available_power(self):
        """Gets the total_available_power of this RackResponse.

        Total available power in kW  # noqa: E501

        :return: The total_available_power of this RackResponse.
        :rtype: float
        """
        return self._total_available_power

    @total_available_power.setter
    def total_available_power(self, total_available_power):
        """Sets the total_available_power of this RackResponse.

        Total available power in kW  # noqa: E501

        :param total_available_power: The total_available_power of this RackResponse.
        :type total_available_power: float
        """

        self._total_available_power = total_available_power

    @property
    def total_available_cooling_capacity(self):
        """Gets the total_available_cooling_capacity of this RackResponse.

        Total available cooling capacity in kW  # noqa: E501

        :return: The total_available_cooling_capacity of this RackResponse.
        :rtype: float
        """
        return self._total_available_cooling_capacity

    @total_available_cooling_capacity.setter
    def total_available_cooling_capacity(self, total_available_cooling_capacity):
        """Sets the total_available_cooling_capacity of this RackResponse.

        Total available cooling capacity in kW  # noqa: E501

        :param total_available_cooling_capacity: The total_available_cooling_capacity of this RackResponse.
        :type total_available_cooling_capacity: float
        """

        self._total_available_cooling_capacity = total_available_cooling_capacity

    @property
    def number_of_pdus(self):
        """Gets the number_of_pdus of this RackResponse.

        Number of PDUs in the rack  # noqa: E501

        :return: The number_of_pdus of this RackResponse.
        :rtype: int
        """
        return self._number_of_pdus

    @number_of_pdus.setter
    def number_of_pdus(self, number_of_pdus):
        """Sets the number_of_pdus of this RackResponse.

        Number of PDUs in the rack  # noqa: E501

        :param number_of_pdus: The number_of_pdus of this RackResponse.
        :type number_of_pdus: int
        """
        if number_of_pdus is not None and number_of_pdus < 1:  # noqa: E501
            raise ValueError("Invalid value for `number_of_pdus`, must be a value greater than or equal to `1`")  # noqa: E501

        self._number_of_pdus = number_of_pdus

    @property
    def power_redundancy(self):
        """Gets the power_redundancy of this RackResponse.

        Number of power feeds used for redundancy  # noqa: E501

        :return: The power_redundancy of this RackResponse.
        :rtype: int
        """
        return self._power_redundancy

    @power_redundancy.setter
    def power_redundancy(self, power_redundancy):
        """Sets the power_redundancy of this RackResponse.

        Number of power feeds used for redundancy  # noqa: E501

        :param power_redundancy: The power_redundancy of this RackResponse.
        :type power_redundancy: int
        """
        if power_redundancy is not None and power_redundancy < 1:  # noqa: E501
            raise ValueError("Invalid value for `power_redundancy`, must be a value greater than or equal to `1`")  # noqa: E501

        self._power_redundancy = power_redundancy

    @property
    def product_passport(self):
        """Gets the product_passport of this RackResponse.

        LCA product passport data  # noqa: E501

        :return: The product_passport of this RackResponse.
        :rtype: object
        """
        return self._product_passport

    @product_passport.setter
    def product_passport(self, product_passport):
        """Sets the product_passport of this RackResponse.

        LCA product passport data  # noqa: E501

        :param product_passport: The product_passport of this RackResponse.
        :type product_passport: object
        """

        self._product_passport = product_passport

    @property
    def id(self):
        """Gets the id of this RackResponse.

        Unique rack identifier (format RACK-[FACILITY_ID]-[RACK_ID])  # noqa: E501

        :return: The id of this RackResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RackResponse.

        Unique rack identifier (format RACK-[FACILITY_ID]-[RACK_ID])  # noqa: E501

        :param id: The id of this RackResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def time_series_config(self):
        """Gets the time_series_config of this RackResponse.


        :return: The time_series_config of this RackResponse.
        :rtype: RackTimeSeriesConfig
        """
        return self._time_series_config

    @time_series_config.setter
    def time_series_config(self, time_series_config):
        """Sets the time_series_config of this RackResponse.


        :param time_series_config: The time_series_config of this RackResponse.
        :type time_series_config: RackTimeSeriesConfig
        """
        if time_series_config is None:
            raise ValueError("Invalid value for `time_series_config`, must not be `None`")  # noqa: E501

        self._time_series_config = time_series_config

    @property
    def created_at(self):
        """Gets the created_at of this RackResponse.


        :return: The created_at of this RackResponse.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this RackResponse.


        :param created_at: The created_at of this RackResponse.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this RackResponse.


        :return: The updated_at of this RackResponse.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this RackResponse.


        :param updated_at: The updated_at of this RackResponse.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
