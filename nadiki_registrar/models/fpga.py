# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nadiki_registrar.models.base_model_ import Model
from nadiki_registrar import util


class FPGA(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, vendor=None, type=None):  # noqa: E501
        """FPGA - a model defined in OpenAPI

        :param vendor: The vendor of this FPGA.  # noqa: E501
        :type vendor: str
        :param type: The type of this FPGA.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'vendor': str,
            'type': str
        }

        self.attribute_map = {
            'vendor': 'vendor',
            'type': 'type'
        }

        self._vendor = vendor
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'FPGA':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FPGA of this FPGA.  # noqa: E501
        :rtype: FPGA
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vendor(self):
        """Gets the vendor of this FPGA.

        FPGA vendor (e.g., Intel, Xilinx)  # noqa: E501

        :return: The vendor of this FPGA.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this FPGA.

        FPGA vendor (e.g., Intel, Xilinx)  # noqa: E501

        :param vendor: The vendor of this FPGA.
        :type vendor: str
        """
        if vendor is None:
            raise ValueError("Invalid value for `vendor`, must not be `None`")  # noqa: E501

        self._vendor = vendor

    @property
    def type(self):
        """Gets the type of this FPGA.

        FPGA type identifier  # noqa: E501

        :return: The type of this FPGA.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FPGA.

        FPGA type identifier  # noqa: E501

        :param type: The type of this FPGA.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type
