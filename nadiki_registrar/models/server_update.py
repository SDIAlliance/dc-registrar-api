# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nadiki_registrar.models.base_model_ import Model
from nadiki_registrar.models.cpu import CPU
from nadiki_registrar.models.fpga import FPGA
from nadiki_registrar.models.gpu import GPU
from nadiki_registrar.models.hard_disk import HardDisk
from nadiki_registrar import util

from nadiki_registrar.models.cpu import CPU  # noqa: E501
from nadiki_registrar.models.fpga import FPGA  # noqa: E501
from nadiki_registrar.models.gpu import GPU  # noqa: E501
from nadiki_registrar.models.hard_disk import HardDisk  # noqa: E501

class ServerUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, facility_id=None, rack_id=None, rated_power=None, total_cpu_sockets=2, installed_cpus=None, number_of_psus=2, total_installed_memory=None, number_of_memory_units=None, hard_disks=None, total_gpus=0, installed_gpus=None, total_fpgas=0, installed_fpgas=None, product_passport=None, cooling_type='air'):  # noqa: E501
        """ServerUpdate - a model defined in OpenAPI

        :param facility_id: The facility_id of this ServerUpdate.  # noqa: E501
        :type facility_id: str
        :param rack_id: The rack_id of this ServerUpdate.  # noqa: E501
        :type rack_id: str
        :param rated_power: The rated_power of this ServerUpdate.  # noqa: E501
        :type rated_power: float
        :param total_cpu_sockets: The total_cpu_sockets of this ServerUpdate.  # noqa: E501
        :type total_cpu_sockets: int
        :param installed_cpus: The installed_cpus of this ServerUpdate.  # noqa: E501
        :type installed_cpus: List[CPU]
        :param number_of_psus: The number_of_psus of this ServerUpdate.  # noqa: E501
        :type number_of_psus: int
        :param total_installed_memory: The total_installed_memory of this ServerUpdate.  # noqa: E501
        :type total_installed_memory: int
        :param number_of_memory_units: The number_of_memory_units of this ServerUpdate.  # noqa: E501
        :type number_of_memory_units: int
        :param hard_disks: The hard_disks of this ServerUpdate.  # noqa: E501
        :type hard_disks: List[HardDisk]
        :param total_gpus: The total_gpus of this ServerUpdate.  # noqa: E501
        :type total_gpus: int
        :param installed_gpus: The installed_gpus of this ServerUpdate.  # noqa: E501
        :type installed_gpus: List[GPU]
        :param total_fpgas: The total_fpgas of this ServerUpdate.  # noqa: E501
        :type total_fpgas: int
        :param installed_fpgas: The installed_fpgas of this ServerUpdate.  # noqa: E501
        :type installed_fpgas: List[FPGA]
        :param product_passport: The product_passport of this ServerUpdate.  # noqa: E501
        :type product_passport: object
        :param cooling_type: The cooling_type of this ServerUpdate.  # noqa: E501
        :type cooling_type: str
        """
        self.openapi_types = {
            'facility_id': str,
            'rack_id': str,
            'rated_power': float,
            'total_cpu_sockets': int,
            'installed_cpus': List[CPU],
            'number_of_psus': int,
            'total_installed_memory': int,
            'number_of_memory_units': int,
            'hard_disks': List[HardDisk],
            'total_gpus': int,
            'installed_gpus': List[GPU],
            'total_fpgas': int,
            'installed_fpgas': List[FPGA],
            'product_passport': object,
            'cooling_type': str
        }

        self.attribute_map = {
            'facility_id': 'facility_id',
            'rack_id': 'rack_id',
            'rated_power': 'rated_power',
            'total_cpu_sockets': 'total_cpu_sockets',
            'installed_cpus': 'installed_cpus',
            'number_of_psus': 'number_of_psus',
            'total_installed_memory': 'total_installed_memory',
            'number_of_memory_units': 'number_of_memory_units',
            'hard_disks': 'hard_disks',
            'total_gpus': 'total_gpus',
            'installed_gpus': 'installed_gpus',
            'total_fpgas': 'total_fpgas',
            'installed_fpgas': 'installed_fpgas',
            'product_passport': 'product_passport',
            'cooling_type': 'cooling_type'
        }

        self._facility_id = facility_id
        self._rack_id = rack_id
        self._rated_power = rated_power
        self._total_cpu_sockets = total_cpu_sockets
        self._installed_cpus = installed_cpus
        self._number_of_psus = number_of_psus
        self._total_installed_memory = total_installed_memory
        self._number_of_memory_units = number_of_memory_units
        self._hard_disks = hard_disks
        self._total_gpus = total_gpus
        self._installed_gpus = installed_gpus
        self._total_fpgas = total_fpgas
        self._installed_fpgas = installed_fpgas
        self._product_passport = product_passport
        self._cooling_type = cooling_type

    @classmethod
    def from_dict(cls, dikt) -> 'ServerUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServerUpdate of this ServerUpdate.  # noqa: E501
        :rtype: ServerUpdate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def facility_id(self):
        """Gets the facility_id of this ServerUpdate.

        ID of the facility where the server is located  # noqa: E501

        :return: The facility_id of this ServerUpdate.
        :rtype: str
        """
        return self._facility_id

    @facility_id.setter
    def facility_id(self, facility_id):
        """Sets the facility_id of this ServerUpdate.

        ID of the facility where the server is located  # noqa: E501

        :param facility_id: The facility_id of this ServerUpdate.
        :type facility_id: str
        """
        if facility_id is None:
            raise ValueError("Invalid value for `facility_id`, must not be `None`")  # noqa: E501

        self._facility_id = facility_id

    @property
    def rack_id(self):
        """Gets the rack_id of this ServerUpdate.

        ID of the rack where the server is installed  # noqa: E501

        :return: The rack_id of this ServerUpdate.
        :rtype: str
        """
        return self._rack_id

    @rack_id.setter
    def rack_id(self, rack_id):
        """Sets the rack_id of this ServerUpdate.

        ID of the rack where the server is installed  # noqa: E501

        :param rack_id: The rack_id of this ServerUpdate.
        :type rack_id: str
        """
        if rack_id is None:
            raise ValueError("Invalid value for `rack_id`, must not be `None`")  # noqa: E501

        self._rack_id = rack_id

    @property
    def rated_power(self):
        """Gets the rated_power of this ServerUpdate.

        Rated power in kW  # noqa: E501

        :return: The rated_power of this ServerUpdate.
        :rtype: float
        """
        return self._rated_power

    @rated_power.setter
    def rated_power(self, rated_power):
        """Sets the rated_power of this ServerUpdate.

        Rated power in kW  # noqa: E501

        :param rated_power: The rated_power of this ServerUpdate.
        :type rated_power: float
        """

        self._rated_power = rated_power

    @property
    def total_cpu_sockets(self):
        """Gets the total_cpu_sockets of this ServerUpdate.

        Total number of CPU sockets  # noqa: E501

        :return: The total_cpu_sockets of this ServerUpdate.
        :rtype: int
        """
        return self._total_cpu_sockets

    @total_cpu_sockets.setter
    def total_cpu_sockets(self, total_cpu_sockets):
        """Sets the total_cpu_sockets of this ServerUpdate.

        Total number of CPU sockets  # noqa: E501

        :param total_cpu_sockets: The total_cpu_sockets of this ServerUpdate.
        :type total_cpu_sockets: int
        """
        if total_cpu_sockets is not None and total_cpu_sockets < 1:  # noqa: E501
            raise ValueError("Invalid value for `total_cpu_sockets`, must be a value greater than or equal to `1`")  # noqa: E501

        self._total_cpu_sockets = total_cpu_sockets

    @property
    def installed_cpus(self):
        """Gets the installed_cpus of this ServerUpdate.

        Array of installed CPUs  # noqa: E501

        :return: The installed_cpus of this ServerUpdate.
        :rtype: List[CPU]
        """
        return self._installed_cpus

    @installed_cpus.setter
    def installed_cpus(self, installed_cpus):
        """Sets the installed_cpus of this ServerUpdate.

        Array of installed CPUs  # noqa: E501

        :param installed_cpus: The installed_cpus of this ServerUpdate.
        :type installed_cpus: List[CPU]
        """

        self._installed_cpus = installed_cpus

    @property
    def number_of_psus(self):
        """Gets the number_of_psus of this ServerUpdate.

        Number of power supply units  # noqa: E501

        :return: The number_of_psus of this ServerUpdate.
        :rtype: int
        """
        return self._number_of_psus

    @number_of_psus.setter
    def number_of_psus(self, number_of_psus):
        """Sets the number_of_psus of this ServerUpdate.

        Number of power supply units  # noqa: E501

        :param number_of_psus: The number_of_psus of this ServerUpdate.
        :type number_of_psus: int
        """
        if number_of_psus is not None and number_of_psus < 1:  # noqa: E501
            raise ValueError("Invalid value for `number_of_psus`, must be a value greater than or equal to `1`")  # noqa: E501

        self._number_of_psus = number_of_psus

    @property
    def total_installed_memory(self):
        """Gets the total_installed_memory of this ServerUpdate.

        Total installed memory in GB  # noqa: E501

        :return: The total_installed_memory of this ServerUpdate.
        :rtype: int
        """
        return self._total_installed_memory

    @total_installed_memory.setter
    def total_installed_memory(self, total_installed_memory):
        """Sets the total_installed_memory of this ServerUpdate.

        Total installed memory in GB  # noqa: E501

        :param total_installed_memory: The total_installed_memory of this ServerUpdate.
        :type total_installed_memory: int
        """

        self._total_installed_memory = total_installed_memory

    @property
    def number_of_memory_units(self):
        """Gets the number_of_memory_units of this ServerUpdate.

        Number of memory units installed  # noqa: E501

        :return: The number_of_memory_units of this ServerUpdate.
        :rtype: int
        """
        return self._number_of_memory_units

    @number_of_memory_units.setter
    def number_of_memory_units(self, number_of_memory_units):
        """Sets the number_of_memory_units of this ServerUpdate.

        Number of memory units installed  # noqa: E501

        :param number_of_memory_units: The number_of_memory_units of this ServerUpdate.
        :type number_of_memory_units: int
        """

        self._number_of_memory_units = number_of_memory_units

    @property
    def hard_disks(self):
        """Gets the hard_disks of this ServerUpdate.

        Array of installed hard disks  # noqa: E501

        :return: The hard_disks of this ServerUpdate.
        :rtype: List[HardDisk]
        """
        return self._hard_disks

    @hard_disks.setter
    def hard_disks(self, hard_disks):
        """Sets the hard_disks of this ServerUpdate.

        Array of installed hard disks  # noqa: E501

        :param hard_disks: The hard_disks of this ServerUpdate.
        :type hard_disks: List[HardDisk]
        """

        self._hard_disks = hard_disks

    @property
    def total_gpus(self):
        """Gets the total_gpus of this ServerUpdate.

        Total number of GPUs installed  # noqa: E501

        :return: The total_gpus of this ServerUpdate.
        :rtype: int
        """
        return self._total_gpus

    @total_gpus.setter
    def total_gpus(self, total_gpus):
        """Sets the total_gpus of this ServerUpdate.

        Total number of GPUs installed  # noqa: E501

        :param total_gpus: The total_gpus of this ServerUpdate.
        :type total_gpus: int
        """
        if total_gpus is not None and total_gpus < 0:  # noqa: E501
            raise ValueError("Invalid value for `total_gpus`, must be a value greater than or equal to `0`")  # noqa: E501

        self._total_gpus = total_gpus

    @property
    def installed_gpus(self):
        """Gets the installed_gpus of this ServerUpdate.

        Array of installed GPUs  # noqa: E501

        :return: The installed_gpus of this ServerUpdate.
        :rtype: List[GPU]
        """
        return self._installed_gpus

    @installed_gpus.setter
    def installed_gpus(self, installed_gpus):
        """Sets the installed_gpus of this ServerUpdate.

        Array of installed GPUs  # noqa: E501

        :param installed_gpus: The installed_gpus of this ServerUpdate.
        :type installed_gpus: List[GPU]
        """

        self._installed_gpus = installed_gpus

    @property
    def total_fpgas(self):
        """Gets the total_fpgas of this ServerUpdate.

        Total number of FPGAs installed  # noqa: E501

        :return: The total_fpgas of this ServerUpdate.
        :rtype: int
        """
        return self._total_fpgas

    @total_fpgas.setter
    def total_fpgas(self, total_fpgas):
        """Sets the total_fpgas of this ServerUpdate.

        Total number of FPGAs installed  # noqa: E501

        :param total_fpgas: The total_fpgas of this ServerUpdate.
        :type total_fpgas: int
        """
        if total_fpgas is not None and total_fpgas < 0:  # noqa: E501
            raise ValueError("Invalid value for `total_fpgas`, must be a value greater than or equal to `0`")  # noqa: E501

        self._total_fpgas = total_fpgas

    @property
    def installed_fpgas(self):
        """Gets the installed_fpgas of this ServerUpdate.

        Array of installed FPGAs  # noqa: E501

        :return: The installed_fpgas of this ServerUpdate.
        :rtype: List[FPGA]
        """
        return self._installed_fpgas

    @installed_fpgas.setter
    def installed_fpgas(self, installed_fpgas):
        """Sets the installed_fpgas of this ServerUpdate.

        Array of installed FPGAs  # noqa: E501

        :param installed_fpgas: The installed_fpgas of this ServerUpdate.
        :type installed_fpgas: List[FPGA]
        """

        self._installed_fpgas = installed_fpgas

    @property
    def product_passport(self):
        """Gets the product_passport of this ServerUpdate.

        LCA product passport data  # noqa: E501

        :return: The product_passport of this ServerUpdate.
        :rtype: object
        """
        return self._product_passport

    @product_passport.setter
    def product_passport(self, product_passport):
        """Sets the product_passport of this ServerUpdate.

        LCA product passport data  # noqa: E501

        :param product_passport: The product_passport of this ServerUpdate.
        :type product_passport: object
        """

        self._product_passport = product_passport

    @property
    def cooling_type(self):
        """Gets the cooling_type of this ServerUpdate.

        Type of cooling system used for this server  # noqa: E501

        :return: The cooling_type of this ServerUpdate.
        :rtype: str
        """
        return self._cooling_type

    @cooling_type.setter
    def cooling_type(self, cooling_type):
        """Sets the cooling_type of this ServerUpdate.

        Type of cooling system used for this server  # noqa: E501

        :param cooling_type: The cooling_type of this ServerUpdate.
        :type cooling_type: str
        """
        allowed_values = ["direct-to-chip", "immersion", "back-door-liquid", "back-door-fan", "air"]  # noqa: E501
        if cooling_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cooling_type` ({0}), must be one of {1}"
                .format(cooling_type, allowed_values)
            )

        self._cooling_type = cooling_type
