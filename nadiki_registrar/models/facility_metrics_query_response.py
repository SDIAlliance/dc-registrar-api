# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nadiki_registrar.models.base_model_ import Model
from nadiki_registrar.models.facility_metrics_query_response_metrics_inner import FacilityMetricsQueryResponseMetricsInner
from nadiki_registrar import util

from nadiki_registrar.models.facility_metrics_query_response_metrics_inner import FacilityMetricsQueryResponseMetricsInner  # noqa: E501

class FacilityMetricsQueryResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, facility_id=None, start_time=None, end_time=None, aggregation=None, metrics=None):  # noqa: E501
        """FacilityMetricsQueryResponse - a model defined in OpenAPI

        :param facility_id: The facility_id of this FacilityMetricsQueryResponse.  # noqa: E501
        :type facility_id: str
        :param start_time: The start_time of this FacilityMetricsQueryResponse.  # noqa: E501
        :type start_time: datetime
        :param end_time: The end_time of this FacilityMetricsQueryResponse.  # noqa: E501
        :type end_time: datetime
        :param aggregation: The aggregation of this FacilityMetricsQueryResponse.  # noqa: E501
        :type aggregation: str
        :param metrics: The metrics of this FacilityMetricsQueryResponse.  # noqa: E501
        :type metrics: List[FacilityMetricsQueryResponseMetricsInner]
        """
        self.openapi_types = {
            'facility_id': str,
            'start_time': datetime,
            'end_time': datetime,
            'aggregation': str,
            'metrics': List[FacilityMetricsQueryResponseMetricsInner]
        }

        self.attribute_map = {
            'facility_id': 'facility_id',
            'start_time': 'startTime',
            'end_time': 'endTime',
            'aggregation': 'aggregation',
            'metrics': 'metrics'
        }

        self._facility_id = facility_id
        self._start_time = start_time
        self._end_time = end_time
        self._aggregation = aggregation
        self._metrics = metrics

    @classmethod
    def from_dict(cls, dikt) -> 'FacilityMetricsQueryResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FacilityMetricsQueryResponse of this FacilityMetricsQueryResponse.  # noqa: E501
        :rtype: FacilityMetricsQueryResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def facility_id(self):
        """Gets the facility_id of this FacilityMetricsQueryResponse.

        Facility identifier  # noqa: E501

        :return: The facility_id of this FacilityMetricsQueryResponse.
        :rtype: str
        """
        return self._facility_id

    @facility_id.setter
    def facility_id(self, facility_id):
        """Sets the facility_id of this FacilityMetricsQueryResponse.

        Facility identifier  # noqa: E501

        :param facility_id: The facility_id of this FacilityMetricsQueryResponse.
        :type facility_id: str
        """
        if facility_id is None:
            raise ValueError("Invalid value for `facility_id`, must not be `None`")  # noqa: E501

        self._facility_id = facility_id

    @property
    def start_time(self):
        """Gets the start_time of this FacilityMetricsQueryResponse.

        Start timestamp of the query period  # noqa: E501

        :return: The start_time of this FacilityMetricsQueryResponse.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this FacilityMetricsQueryResponse.

        Start timestamp of the query period  # noqa: E501

        :param start_time: The start_time of this FacilityMetricsQueryResponse.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this FacilityMetricsQueryResponse.

        End timestamp of the query period  # noqa: E501

        :return: The end_time of this FacilityMetricsQueryResponse.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this FacilityMetricsQueryResponse.

        End timestamp of the query period  # noqa: E501

        :param end_time: The end_time of this FacilityMetricsQueryResponse.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def aggregation(self):
        """Gets the aggregation of this FacilityMetricsQueryResponse.

        Aggregation function that was applied  # noqa: E501

        :return: The aggregation of this FacilityMetricsQueryResponse.
        :rtype: str
        """
        return self._aggregation

    @aggregation.setter
    def aggregation(self, aggregation):
        """Sets the aggregation of this FacilityMetricsQueryResponse.

        Aggregation function that was applied  # noqa: E501

        :param aggregation: The aggregation of this FacilityMetricsQueryResponse.
        :type aggregation: str
        """
        allowed_values = ["sum", "average"]  # noqa: E501
        if aggregation not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregation` ({0}), must be one of {1}"
                .format(aggregation, allowed_values)
            )

        self._aggregation = aggregation

    @property
    def metrics(self):
        """Gets the metrics of this FacilityMetricsQueryResponse.


        :return: The metrics of this FacilityMetricsQueryResponse.
        :rtype: List[FacilityMetricsQueryResponseMetricsInner]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this FacilityMetricsQueryResponse.


        :param metrics: The metrics of this FacilityMetricsQueryResponse.
        :type metrics: List[FacilityMetricsQueryResponseMetricsInner]
        """
        if metrics is None:
            raise ValueError("Invalid value for `metrics`, must not be `None`")  # noqa: E501

        self._metrics = metrics
