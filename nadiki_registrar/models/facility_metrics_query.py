# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nadiki_registrar.models.base_model_ import Model
from nadiki_registrar import util


class FacilityMetricsQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, start_time=None, end_time=None, aggregation=None, metrics=None):  # noqa: E501
        """FacilityMetricsQuery - a model defined in OpenAPI

        :param start_time: The start_time of this FacilityMetricsQuery.  # noqa: E501
        :type start_time: datetime
        :param end_time: The end_time of this FacilityMetricsQuery.  # noqa: E501
        :type end_time: datetime
        :param aggregation: The aggregation of this FacilityMetricsQuery.  # noqa: E501
        :type aggregation: str
        :param metrics: The metrics of this FacilityMetricsQuery.  # noqa: E501
        :type metrics: List[str]
        """
        self.openapi_types = {
            'start_time': datetime,
            'end_time': datetime,
            'aggregation': str,
            'metrics': List[str]
        }

        self.attribute_map = {
            'start_time': 'startTime',
            'end_time': 'endTime',
            'aggregation': 'aggregation',
            'metrics': 'metrics'
        }

        self._start_time = start_time
        self._end_time = end_time
        self._aggregation = aggregation
        self._metrics = metrics

    @classmethod
    def from_dict(cls, dikt) -> 'FacilityMetricsQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FacilityMetricsQuery of this FacilityMetricsQuery.  # noqa: E501
        :rtype: FacilityMetricsQuery
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_time(self):
        """Gets the start_time of this FacilityMetricsQuery.

        Start timestamp for the query period  # noqa: E501

        :return: The start_time of this FacilityMetricsQuery.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this FacilityMetricsQuery.

        Start timestamp for the query period  # noqa: E501

        :param start_time: The start_time of this FacilityMetricsQuery.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this FacilityMetricsQuery.

        End timestamp for the query period  # noqa: E501

        :return: The end_time of this FacilityMetricsQuery.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this FacilityMetricsQuery.

        End timestamp for the query period  # noqa: E501

        :param end_time: The end_time of this FacilityMetricsQuery.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def aggregation(self):
        """Gets the aggregation of this FacilityMetricsQuery.

        Aggregation function to apply over the time period  # noqa: E501

        :return: The aggregation of this FacilityMetricsQuery.
        :rtype: str
        """
        return self._aggregation

    @aggregation.setter
    def aggregation(self, aggregation):
        """Sets the aggregation of this FacilityMetricsQuery.

        Aggregation function to apply over the time period  # noqa: E501

        :param aggregation: The aggregation of this FacilityMetricsQuery.
        :type aggregation: str
        """
        allowed_values = ["sum", "average"]  # noqa: E501
        if aggregation not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregation` ({0}), must be one of {1}"
                .format(aggregation, allowed_values)
            )

        self._aggregation = aggregation

    @property
    def metrics(self):
        """Gets the metrics of this FacilityMetricsQuery.

        Optional list of specific metrics to query. If not provided, all available metrics will be returned.  # noqa: E501

        :return: The metrics of this FacilityMetricsQuery.
        :rtype: List[str]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this FacilityMetricsQuery.

        Optional list of specific metrics to query. If not provided, all available metrics will be returned.  # noqa: E501

        :param metrics: The metrics of this FacilityMetricsQuery.
        :type metrics: List[str]
        """
        allowed_values = ["heatpump_power_consumption_joules", "office_energy_use_joules", "dc_water_usage_cubic_meters", "office_water_usage_cubic_meters", "total_generator_energy_joules", "generator_load_factor_ratio", "grid_transformers_energy_joules", "onsite_renewable_energy_joules", "it_power_usage_level1_joules", "it_power_usage_level2_joules", "renewable_energy_certificates_joules", "grid_emission_factor_grams", "backup_emission_factor_grams", "electricity_source", "pue_1_ratio", "pue_2_ratio"]  # noqa: E501
        if not set(metrics).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `metrics` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(metrics) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._metrics = metrics
