# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nadiki_registrar.models.base_model_ import Model
from nadiki_registrar.models.server_response import ServerResponse
from nadiki_registrar import util

from nadiki_registrar.models.server_response import ServerResponse  # noqa: E501

class ListServers200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items=None, total=None, limit=None, offset=None):  # noqa: E501
        """ListServers200Response - a model defined in OpenAPI

        :param items: The items of this ListServers200Response.  # noqa: E501
        :type items: List[ServerResponse]
        :param total: The total of this ListServers200Response.  # noqa: E501
        :type total: int
        :param limit: The limit of this ListServers200Response.  # noqa: E501
        :type limit: int
        :param offset: The offset of this ListServers200Response.  # noqa: E501
        :type offset: int
        """
        self.openapi_types = {
            'items': List[ServerResponse],
            'total': int,
            'limit': int,
            'offset': int
        }

        self.attribute_map = {
            'items': 'items',
            'total': 'total',
            'limit': 'limit',
            'offset': 'offset'
        }

        self._items = items
        self._total = total
        self._limit = limit
        self._offset = offset

    @classmethod
    def from_dict(cls, dikt) -> 'ListServers200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The listServers_200_response of this ListServers200Response.  # noqa: E501
        :rtype: ListServers200Response
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this ListServers200Response.


        :return: The items of this ListServers200Response.
        :rtype: List[ServerResponse]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ListServers200Response.


        :param items: The items of this ListServers200Response.
        :type items: List[ServerResponse]
        """

        self._items = items

    @property
    def total(self):
        """Gets the total of this ListServers200Response.

        Total number of servers  # noqa: E501

        :return: The total of this ListServers200Response.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ListServers200Response.

        Total number of servers  # noqa: E501

        :param total: The total of this ListServers200Response.
        :type total: int
        """

        self._total = total

    @property
    def limit(self):
        """Gets the limit of this ListServers200Response.

        Number of servers per page  # noqa: E501

        :return: The limit of this ListServers200Response.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ListServers200Response.

        Number of servers per page  # noqa: E501

        :param limit: The limit of this ListServers200Response.
        :type limit: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this ListServers200Response.

        Current offset  # noqa: E501

        :return: The offset of this ListServers200Response.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ListServers200Response.

        Current offset  # noqa: E501

        :param offset: The offset of this ListServers200Response.
        :type offset: int
        """

        self._offset = offset
