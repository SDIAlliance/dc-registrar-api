# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nadiki_registrar.models.base_model_ import Model
from nadiki_registrar import util


class FacilityCreateCoolingFluidsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, amount=None, gwp_factor=None):  # noqa: E501
        """FacilityCreateCoolingFluidsInner - a model defined in OpenAPI

        :param type: The type of this FacilityCreateCoolingFluidsInner.  # noqa: E501
        :type type: str
        :param amount: The amount of this FacilityCreateCoolingFluidsInner.  # noqa: E501
        :type amount: float
        :param gwp_factor: The gwp_factor of this FacilityCreateCoolingFluidsInner.  # noqa: E501
        :type gwp_factor: float
        """
        self.openapi_types = {
            'type': str,
            'amount': float,
            'gwp_factor': float
        }

        self.attribute_map = {
            'type': 'type',
            'amount': 'amount',
            'gwp_factor': 'gwpFactor'
        }

        self._type = type
        self._amount = amount
        self._gwp_factor = gwp_factor

    @classmethod
    def from_dict(cls, dikt) -> 'FacilityCreateCoolingFluidsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FacilityCreate_coolingFluids_inner of this FacilityCreateCoolingFluidsInner.  # noqa: E501
        :rtype: FacilityCreateCoolingFluidsInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this FacilityCreateCoolingFluidsInner.

        Type identifier for the cooling fluid  # noqa: E501

        :return: The type of this FacilityCreateCoolingFluidsInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FacilityCreateCoolingFluidsInner.

        Type identifier for the cooling fluid  # noqa: E501

        :param type: The type of this FacilityCreateCoolingFluidsInner.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def amount(self):
        """Gets the amount of this FacilityCreateCoolingFluidsInner.

        Amount of cooling fluid (kg or m3)  # noqa: E501

        :return: The amount of this FacilityCreateCoolingFluidsInner.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this FacilityCreateCoolingFluidsInner.

        Amount of cooling fluid (kg or m3)  # noqa: E501

        :param amount: The amount of this FacilityCreateCoolingFluidsInner.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def gwp_factor(self):
        """Gets the gwp_factor of this FacilityCreateCoolingFluidsInner.

        Global Warming Potential factor for this fluid type  # noqa: E501

        :return: The gwp_factor of this FacilityCreateCoolingFluidsInner.
        :rtype: float
        """
        return self._gwp_factor

    @gwp_factor.setter
    def gwp_factor(self, gwp_factor):
        """Sets the gwp_factor of this FacilityCreateCoolingFluidsInner.

        Global Warming Potential factor for this fluid type  # noqa: E501

        :param gwp_factor: The gwp_factor of this FacilityCreateCoolingFluidsInner.
        :type gwp_factor: float
        """

        self._gwp_factor = gwp_factor
