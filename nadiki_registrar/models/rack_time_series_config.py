# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nadiki_registrar.models.base_model_ import Model
from nadiki_registrar.models.rack_time_series_data_point import RackTimeSeriesDataPoint
from nadiki_registrar import util

from nadiki_registrar.models.rack_time_series_data_point import RackTimeSeriesDataPoint  # noqa: E501

class RackTimeSeriesConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint=None, data_points=None):  # noqa: E501
        """RackTimeSeriesConfig - a model defined in OpenAPI

        :param endpoint: The endpoint of this RackTimeSeriesConfig.  # noqa: E501
        :type endpoint: str
        :param data_points: The data_points of this RackTimeSeriesConfig.  # noqa: E501
        :type data_points: List[RackTimeSeriesDataPoint]
        """
        self.openapi_types = {
            'endpoint': str,
            'data_points': List[RackTimeSeriesDataPoint]
        }

        self.attribute_map = {
            'endpoint': 'endpoint',
            'data_points': 'dataPoints'
        }

        self._endpoint = endpoint
        self._data_points = data_points

    @classmethod
    def from_dict(cls, dikt) -> 'RackTimeSeriesConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RackTimeSeriesConfig of this RackTimeSeriesConfig.  # noqa: E501
        :rtype: RackTimeSeriesConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint(self):
        """Gets the endpoint of this RackTimeSeriesConfig.

        Time series endpoint URL with port number  # noqa: E501

        :return: The endpoint of this RackTimeSeriesConfig.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this RackTimeSeriesConfig.

        Time series endpoint URL with port number  # noqa: E501

        :param endpoint: The endpoint of this RackTimeSeriesConfig.
        :type endpoint: str
        """
        if endpoint is None:
            raise ValueError("Invalid value for `endpoint`, must not be `None`")  # noqa: E501

        self._endpoint = endpoint

    @property
    def data_points(self):
        """Gets the data_points of this RackTimeSeriesConfig.

        List of time series metrics available for streaming  # noqa: E501

        :return: The data_points of this RackTimeSeriesConfig.
        :rtype: List[RackTimeSeriesDataPoint]
        """
        return self._data_points

    @data_points.setter
    def data_points(self, data_points):
        """Sets the data_points of this RackTimeSeriesConfig.

        List of time series metrics available for streaming  # noqa: E501

        :param data_points: The data_points of this RackTimeSeriesConfig.
        :type data_points: List[RackTimeSeriesDataPoint]
        """
        if data_points is None:
            raise ValueError("Invalid value for `data_points`, must not be `None`")  # noqa: E501

        self._data_points = data_points
