# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nadiki_registrar.models.base_model_ import Model
from nadiki_registrar import util


class SupportedTimeSeriesMetric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, unit=None, description=None):  # noqa: E501
        """SupportedTimeSeriesMetric - a model defined in OpenAPI

        :param name: The name of this SupportedTimeSeriesMetric.  # noqa: E501
        :type name: str
        :param unit: The unit of this SupportedTimeSeriesMetric.  # noqa: E501
        :type unit: str
        :param description: The description of this SupportedTimeSeriesMetric.  # noqa: E501
        :type description: str
        """
        self.openapi_types = {
            'name': str,
            'unit': str,
            'description': str
        }

        self.attribute_map = {
            'name': 'name',
            'unit': 'unit',
            'description': 'description'
        }

        self._name = name
        self._unit = unit
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'SupportedTimeSeriesMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SupportedTimeSeriesMetric of this SupportedTimeSeriesMetric.  # noqa: E501
        :rtype: SupportedTimeSeriesMetric
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this SupportedTimeSeriesMetric.

        Prometheus metric name with unit suffix  # noqa: E501

        :return: The name of this SupportedTimeSeriesMetric.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SupportedTimeSeriesMetric.

        Prometheus metric name with unit suffix  # noqa: E501

        :param name: The name of this SupportedTimeSeriesMetric.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def unit(self):
        """Gets the unit of this SupportedTimeSeriesMetric.

        Prometheus metric family  # noqa: E501

        :return: The unit of this SupportedTimeSeriesMetric.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this SupportedTimeSeriesMetric.

        Prometheus metric family  # noqa: E501

        :param unit: The unit of this SupportedTimeSeriesMetric.
        :type unit: str
        """
        allowed_values = ["Time", "Temperature", "Length", "Bytes", "Percent", "Voltage", "Electric current", "Energy", "Power", "Mass", "Value"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit

    @property
    def description(self):
        """Gets the description of this SupportedTimeSeriesMetric.

        Detailed description of what this metric measures  # noqa: E501

        :return: The description of this SupportedTimeSeriesMetric.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SupportedTimeSeriesMetric.

        Detailed description of what this metric measures  # noqa: E501

        :param description: The description of this SupportedTimeSeriesMetric.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description
