# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nadiki_registrar.models.base_model_ import Model
from nadiki_registrar import util


class ServerTimeSeriesDataPointTags(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, facility_id=None, rack_id=None, server_id=None, country_code=None):  # noqa: E501
        """ServerTimeSeriesDataPointTags - a model defined in OpenAPI

        :param facility_id: The facility_id of this ServerTimeSeriesDataPointTags.  # noqa: E501
        :type facility_id: str
        :param rack_id: The rack_id of this ServerTimeSeriesDataPointTags.  # noqa: E501
        :type rack_id: str
        :param server_id: The server_id of this ServerTimeSeriesDataPointTags.  # noqa: E501
        :type server_id: str
        :param country_code: The country_code of this ServerTimeSeriesDataPointTags.  # noqa: E501
        :type country_code: str
        """
        self.openapi_types = {
            'facility_id': str,
            'rack_id': str,
            'server_id': str,
            'country_code': str
        }

        self.attribute_map = {
            'facility_id': 'facility_id',
            'rack_id': 'rack_id',
            'server_id': 'server_id',
            'country_code': 'country_code'
        }

        self._facility_id = facility_id
        self._rack_id = rack_id
        self._server_id = server_id
        self._country_code = country_code

    @classmethod
    def from_dict(cls, dikt) -> 'ServerTimeSeriesDataPointTags':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServerTimeSeriesDataPoint_tags of this ServerTimeSeriesDataPointTags.  # noqa: E501
        :rtype: ServerTimeSeriesDataPointTags
        """
        return util.deserialize_model(dikt, cls)

    @property
    def facility_id(self):
        """Gets the facility_id of this ServerTimeSeriesDataPointTags.

        Facility identifier  # noqa: E501

        :return: The facility_id of this ServerTimeSeriesDataPointTags.
        :rtype: str
        """
        return self._facility_id

    @facility_id.setter
    def facility_id(self, facility_id):
        """Sets the facility_id of this ServerTimeSeriesDataPointTags.

        Facility identifier  # noqa: E501

        :param facility_id: The facility_id of this ServerTimeSeriesDataPointTags.
        :type facility_id: str
        """
        if facility_id is None:
            raise ValueError("Invalid value for `facility_id`, must not be `None`")  # noqa: E501

        self._facility_id = facility_id

    @property
    def rack_id(self):
        """Gets the rack_id of this ServerTimeSeriesDataPointTags.

        Rack identifier  # noqa: E501

        :return: The rack_id of this ServerTimeSeriesDataPointTags.
        :rtype: str
        """
        return self._rack_id

    @rack_id.setter
    def rack_id(self, rack_id):
        """Sets the rack_id of this ServerTimeSeriesDataPointTags.

        Rack identifier  # noqa: E501

        :param rack_id: The rack_id of this ServerTimeSeriesDataPointTags.
        :type rack_id: str
        """
        if rack_id is None:
            raise ValueError("Invalid value for `rack_id`, must not be `None`")  # noqa: E501

        self._rack_id = rack_id

    @property
    def server_id(self):
        """Gets the server_id of this ServerTimeSeriesDataPointTags.

        Server identifier (format SERVER-[FACILITY_ID]-[RACK_ID]-[SERVER_ID])  # noqa: E501

        :return: The server_id of this ServerTimeSeriesDataPointTags.
        :rtype: str
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this ServerTimeSeriesDataPointTags.

        Server identifier (format SERVER-[FACILITY_ID]-[RACK_ID]-[SERVER_ID])  # noqa: E501

        :param server_id: The server_id of this ServerTimeSeriesDataPointTags.
        :type server_id: str
        """
        if server_id is None:
            raise ValueError("Invalid value for `server_id`, must not be `None`")  # noqa: E501

        self._server_id = server_id

    @property
    def country_code(self):
        """Gets the country_code of this ServerTimeSeriesDataPointTags.

        ISO 3166-1 alpha-3 country code  # noqa: E501

        :return: The country_code of this ServerTimeSeriesDataPointTags.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this ServerTimeSeriesDataPointTags.

        ISO 3166-1 alpha-3 country code  # noqa: E501

        :param country_code: The country_code of this ServerTimeSeriesDataPointTags.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")  # noqa: E501

        self._country_code = country_code
