openapi: 3.0.0
info:
  description: API for registering and managing data center facilities
  title: Facility Registry API
  version: 1.0.0
servers:
- description: Registry API v1
  url: https://api.registry.example.com/v1
tags:
- description: |
    The following metrics are supported for streaming time series data. When registering a facility, you will receive the endpoint information as well as labels for Prometheus.

    ## Energy Metrics
    - `heatpump_power_consumption_joules`: Heat pump electricity consumption
    - `office_energy_use_joules`: Office electricity consumption
    - `total_generator_energy_joules`: Generator energy output
    - `grid_transformers_energy_joules`: Transformer energy output
    - `onsite_renewable_energy_joules`: On-site renewable energy production
    - `it_power_usage_level1_joules`: IT power at UPS output
    - `it_power_usage_level2_joules`: IT power at PDU output
    - `renewable_energy_certificates_joules`: Green energy certificates
    - `grid_emission_factor_grams`: The current grid emission factor (g/CO2-eq per kWh)
    - `backup_emission_factor_grams`: The current backup power emission factor (g/CO2-eq per kWh)
    - `electricity_source`: 1 for grid; 2 for backup generators
    - `pue_1_ratio`: Power usage effectiveness measured from the output of the UPS systems for IT load
    - `pue_2_ratio`: Power usage effectiveness measured from the output of the PDU systems for IT load

    ## Water Usage Metrics
    - `dc_water_usage_cubic_meters`: Data center water consumption
    - `office_water_usage_cubic_meters`: Office water consumption

    ## Operational Metrics
    - `generator_load_factor_ratio`: Generator load factor (0-1)
  name: Supported Time Series Metrics for Facilities
  x-displayName: Supported Time Series Metrics for Facilities
- name: facility-api.spec_other
  x-displayName: other
- description: |
    The following metrics are supported for streaming time series data:

    ## Energy Metrics
    - `pdu_N_energy_consumption_joules`: PDU energy consumption readings
      - Multiple metrics exist based on the number of PDUs in the rack
      - Example for a rack with 2 PDUs:
        - `pdu_1_energy_consumption_joules`
        - `pdu_2_energy_consumption_joules`

    ## Temperature Metrics
    - `inlet_temperature_celsius`: Inlet cooling temperature
    - `outlet_temperature_celsius`: Outlet cooling temperature
  name: Supported Time Series Metrics for Racks
  x-displayName: Supported Time Series Metrics for Racks
- name: rack-api.spec_other
  x-displayName: other
- description: |
    The following metrics are supported for streaming time series data:

    ## Energy Metrics
    - `cpu_energy_consumption_joules`: CPU energy consumption via RAPL
    - `server_energy_consumption_joules`: Total server energy consumption via IPMI
  name: Supported Time Series Metrics for Servers
  x-displayName: Supported Time Series Metrics for Servers
- name: server-api.spec_other
  x-displayName: other
paths:
  /facilities:
    get:
      description: Retrieve a list of all registered facilities
      operationId: list_facilities
      parameters:
      - description: Maximum number of facilities to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      - description: Number of facilities to skip
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listFacilities_200_response'
          description: List of facilities
      summary: List all facilities
      tags:
      - facility-api.spec_other
      x-openapi-router-controller: nadiki_registrar.controllers.facility_api_spec_other_controller
    post:
      description: Create a new facility entry in the registry
      operationId: create_facility
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FacilityCreate'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FacilityResponse'
          description: Facility successfully created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input
      summary: Register a new facility
      tags:
      - facility-api.spec_other
      x-openapi-router-controller: nadiki_registrar.controllers.facility_api_spec_other_controller
  /facilities/{facilityId}:
    delete:
      description: Remove a facility from the registry
      operationId: delete_facility
      parameters:
      - description: Unique facility identifier
        explode: false
        in: path
        name: facilityId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Facility successfully deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Facility not found
      summary: Delete facility
      tags:
      - facility-api.spec_other
      x-openapi-router-controller: nadiki_registrar.controllers.facility_api_spec_other_controller
    get:
      description: Retrieve detailed information about a specific facility
      operationId: get_facility
      parameters:
      - description: Unique facility identifier
        explode: false
        in: path
        name: facilityId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FacilityResponse'
          description: Facility details
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Facility not found
      summary: Get facility details
      tags:
      - facility-api.spec_other
      x-openapi-router-controller: nadiki_registrar.controllers.facility_api_spec_other_controller
    put:
      description: Update all facility information
      operationId: update_facility
      parameters:
      - description: Unique facility identifier
        explode: false
        in: path
        name: facilityId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FacilityUpdate'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FacilityResponse'
          description: Facility successfully updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Facility not found
      summary: Update facility
      tags:
      - facility-api.spec_other
      x-openapi-router-controller: nadiki_registrar.controllers.facility_api_spec_other_controller
  /facilities/{facilityId}/query:
    post:
      description: Retrieve aggregated time series metrics for a facility over a specified
        time period
      operationId: query_facility_metrics
      parameters:
      - description: Unique facility identifier
        explode: false
        in: path
        name: facilityId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FacilityMetricsQuery'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FacilityMetricsQueryResponse'
          description: Aggregated metrics data
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid query parameters
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Facility not found
      summary: Query facility metrics
      tags:
      - facility-api.spec_other
      x-openapi-router-controller: nadiki_registrar.controllers.facility_api_spec_other_controller
  /racks:
    get:
      description: Retrieve a list of all registered racks
      operationId: list_racks
      parameters:
      - description: Maximum number of racks to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      - description: Number of racks to skip
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - description: Filter racks by facility ID
        explode: true
        in: query
        name: facility_id
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listRacks_200_response'
          description: List of racks
      summary: List all racks
      tags:
      - rack-api.spec_other
      x-openapi-router-controller: nadiki_registrar.controllers.rack_api_spec_other_controller
    post:
      description: Create a new rack entry in the registry
      operationId: create_rack
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RackCreate'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RackResponse'
          description: Rack successfully created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input
      summary: Register a new rack
      tags:
      - rack-api.spec_other
      x-openapi-router-controller: nadiki_registrar.controllers.rack_api_spec_other_controller
  /racks/{rackId}:
    delete:
      description: Remove a rack from the registry
      operationId: delete_rack
      parameters:
      - description: "Unique rack identifier (format RACK-[FACILITY_ID]-[RACK_ID])"
        explode: false
        in: path
        name: rackId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Rack successfully deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Rack not found
      summary: Delete rack
      tags:
      - rack-api.spec_other
      x-openapi-router-controller: nadiki_registrar.controllers.rack_api_spec_other_controller
    get:
      description: Retrieve detailed information about a specific rack
      operationId: get_rack
      parameters:
      - description: "Unique rack identifier (format RACK-[FACILITY_ID]-[RACK_ID])"
        explode: false
        in: path
        name: rackId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RackResponse'
          description: Rack details
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Rack not found
      summary: Get rack details
      tags:
      - rack-api.spec_other
      x-openapi-router-controller: nadiki_registrar.controllers.rack_api_spec_other_controller
    put:
      description: Update all rack information
      operationId: update_rack
      parameters:
      - description: "Unique rack identifier (format RACK-[FACILITY_ID]-[RACK_ID])"
        explode: false
        in: path
        name: rackId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RackUpdate'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RackResponse'
          description: Rack successfully updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Rack not found
      summary: Update rack
      tags:
      - rack-api.spec_other
      x-openapi-router-controller: nadiki_registrar.controllers.rack_api_spec_other_controller
  /racks/{rackId}/query:
    post:
      description: Retrieve aggregated time series metrics for a rack over a specified
        time period
      operationId: query_rack_metrics
      parameters:
      - description: "Unique rack identifier (format RACK-[FACILITY_ID]-[RACK_ID])"
        explode: false
        in: path
        name: rackId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RackMetricsQuery'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RackMetricsQueryResponse'
          description: Aggregated metrics data
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid query parameters
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Rack not found
      summary: Query rack metrics
      tags:
      - rack-api.spec_other
      x-openapi-router-controller: nadiki_registrar.controllers.rack_api_spec_other_controller
  /servers:
    get:
      description: Retrieve a list of all registered servers
      operationId: list_servers
      parameters:
      - description: Maximum number of servers to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      - description: Number of servers to skip
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - description: Filter servers by facility ID
        explode: true
        in: query
        name: facility_id
        required: false
        schema:
          type: string
        style: form
      - description: Filter servers by rack ID
        explode: true
        in: query
        name: rack_id
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listServers_200_response'
          description: List of servers
      summary: List all servers
      tags:
      - server-api.spec_other
      x-openapi-router-controller: nadiki_registrar.controllers.server_api_spec_other_controller
    post:
      description: Create a new server entry in the registry
      operationId: create_server
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerCreate'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
          description: Server successfully created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input
      summary: Register a new server
      tags:
      - server-api.spec_other
      x-openapi-router-controller: nadiki_registrar.controllers.server_api_spec_other_controller
  /servers/{serverId}:
    delete:
      description: Remove a server from the registry
      operationId: delete_server
      parameters:
      - description: "Unique server identifier (format SERVER-[FACILITY_ID]-[RACK_ID]-[SERVER_ID])"
        explode: false
        in: path
        name: serverId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Server successfully deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Server not found
      summary: Delete server
      tags:
      - server-api.spec_other
      x-openapi-router-controller: nadiki_registrar.controllers.server_api_spec_other_controller
    get:
      description: Retrieve detailed information about a specific server
      operationId: get_server
      parameters:
      - description: "Unique server identifier (format SERVER-[FACILITY_ID]-[RACK_ID]-[SERVER_ID])"
        explode: false
        in: path
        name: serverId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
          description: Server details
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Server not found
      summary: Get server details
      tags:
      - server-api.spec_other
      x-openapi-router-controller: nadiki_registrar.controllers.server_api_spec_other_controller
    put:
      description: Update all server information
      operationId: update_server
      parameters:
      - description: "Unique server identifier (format SERVER-[FACILITY_ID]-[RACK_ID]-[SERVER_ID])"
        explode: false
        in: path
        name: serverId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerUpdate'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
          description: Server successfully updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Server not found
      summary: Update server
      tags:
      - server-api.spec_other
      x-openapi-router-controller: nadiki_registrar.controllers.server_api_spec_other_controller
  /servers/{serverId}/query:
    post:
      description: Retrieve aggregated time series metrics for a server over a specified
        time period
      operationId: query_server_metrics
      parameters:
      - description: "Unique server identifier (format SERVER-[FACILITY_ID]-[RACK_ID]-[SERVER_ID])"
        explode: false
        in: path
        name: serverId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerMetricsQuery'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerMetricsQueryResponse'
          description: Aggregated metrics data
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid query parameters
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Server not found
      summary: Query server metrics
      tags:
      - server-api.spec_other
      x-openapi-router-controller: nadiki_registrar.controllers.server_api_spec_other_controller
components:
  schemas:
    FacilityMetricsQuery:
      example:
        startTime: 2000-01-23T04:56:07.000+00:00
        aggregation: sum
        endTime: 2000-01-23T04:56:07.000+00:00
        metrics:
        - heatpump_power_consumption_joules
        - heatpump_power_consumption_joules
      properties:
        startTime:
          description: Start timestamp for the query period
          format: date-time
          title: startTime
          type: string
        endTime:
          description: End timestamp for the query period
          format: date-time
          title: endTime
          type: string
        aggregation:
          description: Aggregation function to apply over the time period
          enum:
          - sum
          - average
          title: aggregation
          type: string
        metrics:
          description: "Optional list of specific metrics to query. If not provided,\
            \ all available metrics will be returned."
          items:
            enum:
            - heatpump_power_consumption_joules
            - office_energy_use_joules
            - dc_water_usage_cubic_meters
            - office_water_usage_cubic_meters
            - total_generator_energy_joules
            - generator_load_factor_ratio
            - grid_transformers_energy_joules
            - onsite_renewable_energy_joules
            - it_power_usage_level1_joules
            - it_power_usage_level2_joules
            - renewable_energy_certificates_joules
            - grid_emission_factor_grams
            - backup_emission_factor_grams
            - electricity_source
            - pue_1_ratio
            - pue_2_ratio
            type: string
          title: metrics
          type: array
      required:
      - aggregation
      - endTime
      - startTime
      title: FacilityMetricsQuery
      type: object
    FacilityMetricsQueryResponse:
      example:
        facility_id: facility_id
        startTime: 2000-01-23T04:56:07.000+00:00
        aggregation: sum
        endTime: 2000-01-23T04:56:07.000+00:00
        metrics:
        - unit: Time
          granularitySeconds: 6
          name: name
          value: 0.8008282
        - unit: Time
          granularitySeconds: 6
          name: name
          value: 0.8008282
      properties:
        facility_id:
          description: Facility identifier
          title: facility_id
          type: string
        startTime:
          description: Start timestamp of the query period
          format: date-time
          title: startTime
          type: string
        endTime:
          description: End timestamp of the query period
          format: date-time
          title: endTime
          type: string
        aggregation:
          description: Aggregation function that was applied
          enum:
          - sum
          - average
          title: aggregation
          type: string
        metrics:
          items:
            $ref: '#/components/schemas/FacilityMetricsQueryResponse_metrics_inner'
          title: metrics
          type: array
      required:
      - aggregation
      - endTime
      - facility_id
      - metrics
      - startTime
      title: FacilityMetricsQueryResponse
      type: object
    Location:
      example:
        latitude: -75.58509
        longitude: 36.988422
      properties:
        latitude:
          description: Latitude coordinate of the facility
          format: float
          maximum: 90
          minimum: -90
          title: latitude
          type: number
        longitude:
          description: Longitude coordinate of the facility
          format: float
          maximum: 180
          minimum: -180
          title: longitude
          type: number
      required:
      - latitude
      - longitude
      title: Location
      type: object
    FacilityCreate:
      example:
        embeddedGhgEmissionsFacility: 1.4658129
        maintenanceHoursGenerator: 3.6160767
        whiteSpace: 6.846853
        designPue: 1.7386281
        coolingFluids:
        - amount: 7.0614014
          gwpFactor: 9.301444
          type: type
        - amount: 7.0614014
          gwpFactor: 9.301444
          type: type
        totalSpace: 1.4894159
        gridPowerFeeds: 1
        lifetimeFacility: 1
        whiteSpaceFloors: 1
        installedCapacity: 2.027123
        lifetimeAssets: 1
        tierLevel: 1
        location:
          latitude: -75.58509
          longitude: 36.988422
        embeddedGhgEmissionsAssets: 5.637377
      properties:
        location:
          $ref: '#/components/schemas/Location'
        embeddedGhgEmissionsFacility:
          description: Embodied carbon emissions from facility construction (CO2-eq)
          format: float
          title: embeddedGhgEmissionsFacility
          type: number
        lifetimeFacility:
          default: 15
          description: Expected lifetime of the facility in years
          minimum: 1
          title: lifetimeFacility
          type: integer
        embeddedGhgEmissionsAssets:
          description: Sum of GHG emissions embodied in assets
          format: float
          title: embeddedGhgEmissionsAssets
          type: number
        lifetimeAssets:
          default: 10
          description: Expected average lifetime of assets in years
          minimum: 1
          title: lifetimeAssets
          type: integer
        coolingFluids:
          items:
            $ref: '#/components/schemas/FacilityCreate_coolingFluids_inner'
          title: coolingFluids
          type: array
        maintenanceHoursGenerator:
          description: Annual maintenance runtime hours for generators
          format: float
          title: maintenanceHoursGenerator
          type: number
        installedCapacity:
          description: Installed/rated power capacity (watts)
          format: float
          title: installedCapacity
          type: number
        gridPowerFeeds:
          default: 3
          description: Number of physical power feeds
          minimum: 1
          title: gridPowerFeeds
          type: integer
        designPue:
          default: 1.4
          description: Design Power Usage Effectiveness
          format: float
          minimum: 1
          title: designPue
          type: number
        tierLevel:
          default: 3
          description: Certified/rated tier level
          enum:
          - 1
          - 2
          - 3
          - 4
          title: tierLevel
          type: integer
        whiteSpaceFloors:
          default: 1
          description: Number of floors used for white space
          minimum: 1
          title: whiteSpaceFloors
          type: integer
        totalSpace:
          description: Total facility space (m2)
          format: float
          title: totalSpace
          type: number
        whiteSpace:
          description: Total white space (m2)
          format: float
          title: whiteSpace
          type: number
      required:
      - location
      title: FacilityCreate
      type: object
    FacilityUpdate:
      allOf:
      - $ref: '#/components/schemas/FacilityCreate'
      - required:
        - location
        type: object
      title: FacilityUpdate
    SupportedTimeSeriesMetric:
      properties:
        name:
          description: Prometheus metric name with unit suffix
          type: string
        unit:
          description: Prometheus metric family
          enum:
          - Time
          - Temperature
          - Length
          - Bytes
          - Percent
          - Voltage
          - Electric current
          - Energy
          - Power
          - Mass
          type: string
        description:
          description: Detailed description of what this metric measures
          type: string
      required:
      - description
      - name
      - unit
      type: object
    FacilityTimeSeriesDataPoint:
      properties:
        name:
          description: Prometheus metric name with unit suffix
          enum:
          - heatpump_power_consumption_joules
          - office_energy_use_joules
          - dc_water_usage_cubic_meters
          - office_water_usage_cubic_meters
          - total_generator_energy_joules
          - generator_load_factor_ratio
          - grid_transformers_energy_joules
          - onsite_renewable_energy_joules
          - it_power_usage_level1_joules
          - it_power_usage_level2_joules
          - renewable_energy_certificates_joules
          - grid_emission_factor_grams
          - backup_emission_factor_grams
          - electricity_source
          - pue_1_ratio
          - pue_2_ratio
          title: name
          type: string
        unit:
          description: Prometheus metric family
          enum:
          - Time
          - Temperature
          - Length
          - Bytes
          - Percent
          - Voltage
          - Electric current
          - Energy
          - Power
          - Mass
          title: unit
          type: string
        granularitySeconds:
          default: 30
          description: Time series data granularity in seconds
          title: granularitySeconds
          type: integer
        labels:
          $ref: '#/components/schemas/FacilityTimeSeriesDataPoint_labels'
      required:
      - granularitySeconds
      - labels
      - name
      - unit
      title: FacilityTimeSeriesDataPoint
      type: object
    FacilityTimeSeriesConfig:
      properties:
        endpoint:
          description: Time series endpoint URL with port number
          example: https://timeseries.registry.example.com:9090
          title: endpoint
          type: string
        dataPoints:
          description: List of time series metrics available for streaming
          items:
            $ref: '#/components/schemas/FacilityTimeSeriesDataPoint'
          title: dataPoints
          type: array
      required:
      - dataPoints
      - endpoint
      title: FacilityTimeSeriesConfig
      type: object
    FacilityResponse:
      allOf:
      - $ref: '#/components/schemas/FacilityCreate'
      - $ref: '#/components/schemas/FacilityResponse_allOf'
      title: FacilityResponse
    Error:
      properties:
        code:
          description: Error code
          title: code
          type: string
        message:
          description: Error message
          title: message
          type: string
        details:
          description: Additional error details
          title: details
          type: object
      required:
      - code
      - message
      title: Error
      type: object
    RackCreate:
      example:
        total_available_cooling_capacity: 6.0274563
        total_available_power: 0.8008282
        number_of_pdus: 1
        product_passport: "{}"
        power_redundancy: 1
        facility_id: facility_id
      properties:
        facility_id:
          description: ID of the facility where the rack is located
          title: facility_id
          type: string
        total_available_power:
          default: 5
          description: Total available power in kW
          format: float
          title: total_available_power
          type: number
        total_available_cooling_capacity:
          default: 5
          description: Total available cooling capacity in kW
          format: float
          title: total_available_cooling_capacity
          type: number
        number_of_pdus:
          default: 2
          description: Number of PDUs in the rack
          minimum: 1
          title: number_of_pdus
          type: integer
        power_redundancy:
          default: 2
          description: Number of power feeds used for redundancy
          minimum: 1
          title: power_redundancy
          type: integer
        product_passport:
          description: LCA product passport data
          title: product_passport
          type: object
      required:
      - facility_id
      title: RackCreate
      type: object
    RackUpdate:
      allOf:
      - $ref: '#/components/schemas/RackCreate'
      - required:
        - facility_id
        type: object
      title: RackUpdate
    RackTimeSeriesDataPoint:
      properties:
        name:
          description: "Prometheus metric name with unit suffix. For PDU metrics,\
            \ \nthe name must follow the pattern 'pdu_N_energy_consumption_joules'\
            \ \nwhere N is the PDU number (1 to number_of_pdus)\n"
          pattern: "/^(pdu_[1-9][0-9]*_energy_consumption_joules|inlet_temperature_celsius|outlet_temperature_celsius)$/"
          title: name
          type: string
        unit:
          description: Prometheus metric family
          enum:
          - Time
          - Temperature
          - Length
          - Bytes
          - Percent
          - Voltage
          - Electric current
          - Energy
          - Power
          - Mass
          title: unit
          type: string
        granularitySeconds:
          default: 30
          description: Time series data granularity in seconds
          title: granularitySeconds
          type: integer
        labels:
          $ref: '#/components/schemas/RackTimeSeriesDataPoint_labels'
      required:
      - granularitySeconds
      - labels
      - name
      - unit
      title: RackTimeSeriesDataPoint
      type: object
    RackTimeSeriesConfig:
      properties:
        endpoint:
          description: Time series endpoint URL with port number
          example: https://timeseries.registry.example.com:9090
          title: endpoint
          type: string
        dataPoints:
          description: List of time series metrics available for streaming
          items:
            $ref: '#/components/schemas/RackTimeSeriesDataPoint'
          title: dataPoints
          type: array
      required:
      - dataPoints
      - endpoint
      title: RackTimeSeriesConfig
      type: object
    RackResponse:
      allOf:
      - $ref: '#/components/schemas/RackCreate'
      - $ref: '#/components/schemas/RackResponse_allOf'
      title: RackResponse
    RackMetricsQuery:
      example:
        startTime: 2000-01-23T04:56:07.000+00:00
        aggregation: sum
        endTime: 2000-01-23T04:56:07.000+00:00
        metrics:
        - metrics
        - metrics
      properties:
        startTime:
          description: Start timestamp for the query period
          format: date-time
          title: startTime
          type: string
        endTime:
          description: End timestamp for the query period
          format: date-time
          title: endTime
          type: string
        aggregation:
          description: Aggregation function to apply over the time period
          enum:
          - sum
          - average
          title: aggregation
          type: string
        metrics:
          description: "Optional list of specific metrics to query. If not provided,\
            \ all available metrics will be returned."
          items:
            pattern: "^(pdu_[1-9][0-9]*_energy_consumption_joules|inlet_temperature_celsius|outlet_temperature_celsius)$"
            type: string
          title: metrics
          type: array
      required:
      - aggregation
      - endTime
      - startTime
      title: RackMetricsQuery
      type: object
    RackMetricsQueryResponse:
      example:
        rack_id: rack_id
        facility_id: facility_id
        startTime: 2000-01-23T04:56:07.000+00:00
        aggregation: sum
        endTime: 2000-01-23T04:56:07.000+00:00
        metrics:
        - unit: Time
          granularitySeconds: 6
          name: name
          value: 0.8008282
        - unit: Time
          granularitySeconds: 6
          name: name
          value: 0.8008282
      properties:
        facility_id:
          description: Facility identifier
          title: facility_id
          type: string
        rack_id:
          description: "Rack identifier (format RACK-[FACILITY_ID]-[RACK_ID])"
          title: rack_id
          type: string
        startTime:
          description: Start timestamp of the query period
          format: date-time
          title: startTime
          type: string
        endTime:
          description: End timestamp of the query period
          format: date-time
          title: endTime
          type: string
        aggregation:
          description: Aggregation function that was applied
          enum:
          - sum
          - average
          title: aggregation
          type: string
        metrics:
          items:
            $ref: '#/components/schemas/RackMetricsQueryResponse_metrics_inner'
          title: metrics
          type: array
      required:
      - aggregation
      - endTime
      - facility_id
      - metrics
      - rack_id
      - startTime
      title: RackMetricsQueryResponse
      type: object
    CPU:
      example:
        vendor: vendor
        type: type
      properties:
        vendor:
          description: "CPU vendor (e.g., Intel, AMD)"
          title: vendor
          type: string
        type:
          description: CPU type identifier
          title: type
          type: string
      required:
      - type
      - vendor
      title: CPU
      type: object
    GPU:
      example:
        vendor: vendor
        type: type
      properties:
        vendor:
          description: "GPU vendor (e.g., Nvidia, AMD)"
          title: vendor
          type: string
        type:
          description: GPU type identifier
          title: type
          type: string
      required:
      - type
      - vendor
      title: GPU
      type: object
    FPGA:
      example:
        vendor: vendor
        type: type
      properties:
        vendor:
          description: "FPGA vendor (e.g., Intel, Xilinx)"
          title: vendor
          type: string
        type:
          description: FPGA type identifier
          title: type
          type: string
      required:
      - type
      - vendor
      title: FPGA
      type: object
    HardDisk:
      example:
        vendor: vendor
        type: NVMe
        capacity: 2.302136
      properties:
        vendor:
          description: "Disk vendor (e.g., Samsung, Intel)"
          title: vendor
          type: string
        capacity:
          description: Disk capacity in TB
          format: float
          title: capacity
          type: number
        type:
          description: Type of storage device
          enum:
          - NVMe
          - SSD
          - HDD
          - Other
          title: type
          type: string
      required:
      - capacity
      - type
      - vendor
      title: HardDisk
      type: object
    ServerCreate:
      example:
        number_of_psus: 1
        rated_power: 0.8008282
        installed_gpus:
        - vendor: vendor
          type: type
        - vendor: vendor
          type: type
        total_fpgas: 0
        hard_disks:
        - vendor: vendor
          type: NVMe
          capacity: 2.302136
        - vendor: vendor
          type: NVMe
          capacity: 2.302136
        total_cpu_sockets: 1
        total_gpus: 0
        total_installed_memory: 5
        cooling_type: air
        rack_id: rack_id
        installed_fpgas:
        - vendor: vendor
          type: type
        - vendor: vendor
          type: type
        product_passport: "{}"
        installed_cpus:
        - vendor: vendor
          type: type
        - vendor: vendor
          type: type
        facility_id: facility_id
        number_of_memory_units: 5
      properties:
        facility_id:
          description: ID of the facility where the server is located
          title: facility_id
          type: string
        rack_id:
          description: ID of the rack where the server is installed
          title: rack_id
          type: string
        rated_power:
          description: Rated power in kW
          format: float
          title: rated_power
          type: number
        total_cpu_sockets:
          default: 2
          description: Total number of CPU sockets
          minimum: 1
          title: total_cpu_sockets
          type: integer
        installed_cpus:
          description: Array of installed CPUs
          items:
            $ref: '#/components/schemas/CPU'
          title: installed_cpus
          type: array
        number_of_psus:
          default: 2
          description: Number of power supply units
          minimum: 1
          title: number_of_psus
          type: integer
        total_installed_memory:
          description: Total installed memory in GB
          title: total_installed_memory
          type: integer
        number_of_memory_units:
          description: Number of memory units installed
          title: number_of_memory_units
          type: integer
        hard_disks:
          description: Array of installed hard disks
          items:
            $ref: '#/components/schemas/HardDisk'
          title: hard_disks
          type: array
        total_gpus:
          default: 0
          description: Total number of GPUs installed
          minimum: 0
          title: total_gpus
          type: integer
        installed_gpus:
          description: Array of installed GPUs
          items:
            $ref: '#/components/schemas/GPU'
          title: installed_gpus
          type: array
        total_fpgas:
          default: 0
          description: Total number of FPGAs installed
          minimum: 0
          title: total_fpgas
          type: integer
        installed_fpgas:
          description: Array of installed FPGAs
          items:
            $ref: '#/components/schemas/FPGA'
          title: installed_fpgas
          type: array
        product_passport:
          description: LCA product passport data
          title: product_passport
          type: object
        cooling_type:
          default: air
          description: Type of cooling system used for this server
          enum:
          - direct-to-chip
          - immersion
          - back-door-liquid
          - back-door-fan
          - air
          title: cooling_type
          type: string
      required:
      - cooling_type
      - facility_id
      - rack_id
      title: ServerCreate
      type: object
    ServerUpdate:
      allOf:
      - $ref: '#/components/schemas/ServerCreate'
      - required:
        - cooling_type
        - facility_id
        - rack_id
        type: object
      title: ServerUpdate
    ServerTimeSeriesDataPoint:
      properties:
        name:
          description: Prometheus metric name with unit suffix
          pattern: /^(cpu_energy_consumption_joules|server_energy_consumption_joules)$/
          title: name
          type: string
        unit:
          description: Prometheus metric family
          enum:
          - Time
          - Temperature
          - Length
          - Bytes
          - Percent
          - Voltage
          - Electric current
          - Energy
          - Power
          - Mass
          title: unit
          type: string
        granularitySeconds:
          default: 30
          description: Time series data granularity in seconds
          title: granularitySeconds
          type: integer
        labels:
          $ref: '#/components/schemas/ServerTimeSeriesDataPoint_labels'
      required:
      - granularitySeconds
      - labels
      - name
      - unit
      title: ServerTimeSeriesDataPoint
      type: object
    ServerTimeSeriesConfig:
      properties:
        endpoint:
          description: Time series endpoint URL with port number
          example: https://timeseries.registry.example.com:9090
          title: endpoint
          type: string
        dataPoints:
          description: List of time series metrics available for streaming
          items:
            $ref: '#/components/schemas/ServerTimeSeriesDataPoint'
          title: dataPoints
          type: array
      required:
      - dataPoints
      - endpoint
      title: ServerTimeSeriesConfig
      type: object
    ServerResponse:
      allOf:
      - $ref: '#/components/schemas/ServerCreate'
      - $ref: '#/components/schemas/ServerResponse_allOf'
      title: ServerResponse
    ServerMetricsQuery:
      example:
        startTime: 2000-01-23T04:56:07.000+00:00
        aggregation: sum
        endTime: 2000-01-23T04:56:07.000+00:00
        metrics:
        - metrics
        - metrics
      properties:
        startTime:
          description: Start timestamp for the query period
          format: date-time
          title: startTime
          type: string
        endTime:
          description: End timestamp for the query period
          format: date-time
          title: endTime
          type: string
        aggregation:
          description: Aggregation function to apply over the time period
          enum:
          - sum
          - average
          title: aggregation
          type: string
        metrics:
          description: "Optional list of specific metrics to query. If not provided,\
            \ all available metrics will be returned."
          items:
            pattern: ^(cpu_energy_consumption_joules|server_energy_consumption_joules)$
            type: string
          title: metrics
          type: array
      required:
      - aggregation
      - endTime
      - startTime
      title: ServerMetricsQuery
      type: object
    ServerMetricsQueryResponse:
      example:
        rack_id: rack_id
        facility_id: facility_id
        startTime: 2000-01-23T04:56:07.000+00:00
        aggregation: sum
        endTime: 2000-01-23T04:56:07.000+00:00
        metrics:
        - unit: Time
          granularitySeconds: 6
          name: name
          value: 0.8008282
        - unit: Time
          granularitySeconds: 6
          name: name
          value: 0.8008282
        server_id: server_id
      properties:
        facility_id:
          description: Facility identifier
          title: facility_id
          type: string
        rack_id:
          description: Rack identifier
          title: rack_id
          type: string
        server_id:
          description: "Server identifier (format SERVER-[FACILITY_ID]-[RACK_ID]-[SERVER_ID])"
          title: server_id
          type: string
        startTime:
          description: Start timestamp of the query period
          format: date-time
          title: startTime
          type: string
        endTime:
          description: End timestamp of the query period
          format: date-time
          title: endTime
          type: string
        aggregation:
          description: Aggregation function that was applied
          enum:
          - sum
          - average
          title: aggregation
          type: string
        metrics:
          items:
            $ref: '#/components/schemas/ServerMetricsQueryResponse_metrics_inner'
          title: metrics
          type: array
      required:
      - aggregation
      - endTime
      - facility_id
      - metrics
      - rack_id
      - server_id
      - startTime
      title: ServerMetricsQueryResponse
      type: object
    listFacilities_200_response:
      example:
        total: 0
        offset: 1
        limit: 6
        items:
        - null
        - null
      properties:
        items:
          items:
            $ref: '#/components/schemas/FacilityResponse'
          title: items
          type: array
        total:
          description: Total number of facilities
          title: total
          type: integer
        limit:
          description: Number of facilities per page
          title: limit
          type: integer
        offset:
          description: Current offset
          title: offset
          type: integer
      title: listFacilities_200_response
      type: object
    listRacks_200_response:
      example:
        total: 0
        offset: 1
        limit: 6
        items:
        - null
        - null
      properties:
        items:
          items:
            $ref: '#/components/schemas/RackResponse'
          title: items
          type: array
        total:
          description: Total number of racks
          title: total
          type: integer
        limit:
          description: Number of racks per page
          title: limit
          type: integer
        offset:
          description: Current offset
          title: offset
          type: integer
      title: listRacks_200_response
      type: object
    listServers_200_response:
      example:
        total: 0
        offset: 1
        limit: 6
        items:
        - null
        - null
      properties:
        items:
          items:
            $ref: '#/components/schemas/ServerResponse'
          title: items
          type: array
        total:
          description: Total number of servers
          title: total
          type: integer
        limit:
          description: Number of servers per page
          title: limit
          type: integer
        offset:
          description: Current offset
          title: offset
          type: integer
      title: listServers_200_response
      type: object
    FacilityMetricsQueryResponse_metrics_inner:
      example:
        unit: Time
        granularitySeconds: 6
        name: name
        value: 0.8008282
      properties:
        name:
          description: Name of the metric
          title: name
          type: string
        value:
          description: Aggregated value over the time period
          format: float
          title: value
          type: number
        unit:
          description: Unit of the metric
          enum:
          - Time
          - Temperature
          - Length
          - Bytes
          - Percent
          - Voltage
          - Electric current
          - Energy
          - Power
          - Mass
          title: unit
          type: string
        granularitySeconds:
          description: Original granularity of the data points in seconds
          title: granularitySeconds
          type: integer
      required:
      - granularitySeconds
      - name
      - unit
      - value
      title: FacilityMetricsQueryResponse_metrics_inner
      type: object
    FacilityCreate_coolingFluids_inner:
      example:
        amount: 7.0614014
        gwpFactor: 9.301444
        type: type
      properties:
        type:
          description: Type identifier for the cooling fluid
          title: type
          type: string
        amount:
          description: Amount of cooling fluid (kg or m3)
          format: float
          title: amount
          type: number
        gwpFactor:
          description: Global Warming Potential factor for this fluid type
          format: float
          title: gwpFactor
          type: number
      required:
      - amount
      - type
      title: FacilityCreate_coolingFluids_inner
      type: object
    FacilityTimeSeriesDataPoint_labels:
      properties:
        facility_id:
          description: Facility identifier
          title: facility_id
          type: string
        country_code:
          description: ISO 3166-1 alpha-3 country code
          title: country_code
          type: string
      required:
      - country_code
      - facility_id
      title: FacilityTimeSeriesDataPoint_labels
      type: object
    FacilityResponse_allOf:
      properties:
        id:
          description: "Unique facility identifier (format FACILITY-[COUNTRY_CODE]-ID)"
          example: FACILITY-NLD-001
          title: id
          type: string
        countryCode:
          description: ISO 3166-1 alpha-3 country code derived from location
          example: NLD
          title: countryCode
          type: string
        timeSeriesConfig:
          $ref: '#/components/schemas/FacilityTimeSeriesConfig'
        createdAt:
          format: date-time
          title: createdAt
          type: string
        updatedAt:
          format: date-time
          title: updatedAt
          type: string
      required:
      - countryCode
      - id
      - location
      - timeSeriesConfig
      title: FacilityResponse_allOf
      type: object
      example: null
    RackTimeSeriesDataPoint_labels:
      properties:
        facility_id:
          description: Facility identifier
          title: facility_id
          type: string
        rack_id:
          description: "Rack identifier (format RACK-[FACILITY_ID]-[RACK_ID])"
          title: rack_id
          type: string
        country_code:
          description: ISO 3166-1 alpha-3 country code
          title: country_code
          type: string
      required:
      - country_code
      - facility_id
      - rack_id
      title: RackTimeSeriesDataPoint_labels
      type: object
    RackResponse_allOf:
      properties:
        id:
          description: "Unique rack identifier (format RACK-[FACILITY_ID]-[RACK_ID])"
          example: RACK-FACILITY-NLD-001-001
          title: id
          type: string
        timeSeriesConfig:
          $ref: '#/components/schemas/RackTimeSeriesConfig'
        createdAt:
          format: date-time
          title: createdAt
          type: string
        updatedAt:
          format: date-time
          title: updatedAt
          type: string
      required:
      - facility_id
      - id
      - timeSeriesConfig
      title: RackResponse_allOf
      type: object
      example: null
    RackMetricsQueryResponse_metrics_inner:
      example:
        unit: Time
        granularitySeconds: 6
        name: name
        value: 0.8008282
      properties:
        name:
          description: Name of the metric
          pattern: "^(pdu_[1-9][0-9]*_energy_consumption_joules|inlet_temperature_celsius|outlet_temperature_celsius)$"
          title: name
          type: string
        value:
          description: Aggregated value over the time period
          format: float
          title: value
          type: number
        unit:
          description: Unit of the metric
          enum:
          - Time
          - Temperature
          - Length
          - Bytes
          - Percent
          - Voltage
          - Electric current
          - Energy
          - Power
          - Mass
          title: unit
          type: string
        granularitySeconds:
          description: Original granularity of the data points in seconds
          title: granularitySeconds
          type: integer
      required:
      - granularitySeconds
      - name
      - unit
      - value
      title: RackMetricsQueryResponse_metrics_inner
      type: object
    ServerTimeSeriesDataPoint_labels:
      properties:
        facility_id:
          description: Facility identifier
          title: facility_id
          type: string
        rack_id:
          description: Rack identifier
          title: rack_id
          type: string
        server_id:
          description: "Server identifier (format SERVER-[FACILITY_ID]-[RACK_ID]-[SERVER_ID])"
          title: server_id
          type: string
        country_code:
          description: ISO 3166-1 alpha-3 country code
          title: country_code
          type: string
      required:
      - country_code
      - facility_id
      - rack_id
      - server_id
      title: ServerTimeSeriesDataPoint_labels
      type: object
    ServerResponse_allOf:
      properties:
        id:
          description: "Unique server identifier (format SERVER-[FACILITY_ID]-[RACK_ID]-[SERVER_ID])"
          example: SERVER-FACILITY-NLD-001-RACK-001-001
          title: id
          type: string
        timeSeriesConfig:
          $ref: '#/components/schemas/ServerTimeSeriesConfig'
        createdAt:
          format: date-time
          title: createdAt
          type: string
        updatedAt:
          format: date-time
          title: updatedAt
          type: string
      required:
      - id
      - timeSeriesConfig
      title: ServerResponse_allOf
      type: object
      example: null
    ServerMetricsQueryResponse_metrics_inner:
      example:
        unit: Time
        granularitySeconds: 6
        name: name
        value: 0.8008282
      properties:
        name:
          description: Name of the metric
          pattern: ^(cpu_energy_consumption_joules|server_energy_consumption_joules)$
          title: name
          type: string
        value:
          description: Aggregated value over the time period
          format: float
          title: value
          type: number
        unit:
          description: Unit of the metric
          enum:
          - Time
          - Temperature
          - Length
          - Bytes
          - Percent
          - Voltage
          - Electric current
          - Energy
          - Power
          - Mass
          title: unit
          type: string
        granularitySeconds:
          description: Original granularity of the data points in seconds
          title: granularitySeconds
          type: integer
      required:
      - granularitySeconds
      - name
      - unit
      - value
      title: ServerMetricsQueryResponse_metrics_inner
      type: object
  x-supported-facility-timeseries-metrics:
    description: List of all supported time series metrics for facility monitoring
    metrics:
    - name: heatpump_power_consumption_joules
      unit: Energy
      description: Amount of electricity used by the heat pump to generate heat
    - name: office_energy_use_joules
      unit: Energy
      description: Amount of electricity used by the office
    - name: dc_water_usage_cubic_meters
      unit: Length
      description: Amount of fresh water used by the DC (m3)
    - name: office_water_usage_cubic_meters
      unit: Length
      description: Amount of fresh water used by the office (m3)
    - name: total_generator_energy_joules
      unit: Energy
      description: Total energy output of the generators running
    - name: generator_load_factor_ratio
      unit: Percent
      description: Average load factor of all generators running
    - name: grid_transformers_energy_joules
      unit: Energy
      description: Sum of energy output of all transformers
    - name: onsite_renewable_energy_joules
      unit: Energy
      description: Sum of energy produced of all on-site renewable energy sources
    - name: it_power_usage_level1_joules
      unit: Energy
      description: Sum of power usage measured at UPS systems output
    - name: it_power_usage_level2_joules
      unit: Energy
      description: Sum of power usage measured at PDU outputs in each rack
    - name: renewable_energy_certificates_joules
      unit: Energy
      description: Energy covered by annually matched green energy certificates
    - name: grid_emission_factor_grams
      unit: Mass
      description: The current grid emission factor (g/CO2-eq per kWh)
    - name: backup_emission_factor_grams
      unit: Mass
      description: The current backup power emission factor (g/CO2-eq per kWh)
    - name: electricity_source
      unit: Value
      description: 1 for grid; 2 for backup generators
    - name: pue_1_ratio
      unit: Percentage
      description: Power usage effectiveness measured from the output of the UPS systems
        for IT load
    - name: pue_2_ratio
      unit: Percentage
      description: Power usage effectiveness measured from the output of the PDU systems
        for IT load
  x-supported-rack-timeseries-metrics:
    description: List of all supported time series metrics for rack monitoring
    metrics:
    - name: pdu_N_energy_consumption_joules
      unit: Energy
      description: "Energy consumption reading from PDU number N. \nMultiple metrics\
        \ will exist based on number_of_pdus, \ne.g., pdu_1_energy_consumption_joules,\
        \ pdu_2_energy_consumption_joules\n"
    - name: inlet_temperature_celsius
      unit: Temperature
      description: Measurement of inlet cooling temperature (water or air)
    - name: outlet_temperature_celsius
      unit: Temperature
      description: Measurement of outlet cooling temperature (water or air)
  x-supported-server-timeseries-metrics:
    description: List of all supported time series metrics for server monitoring
    metrics:
    - name: cpu_energy_consumption_joules
      unit: Energy
      description: Total energy consumption of all CPUs measured via RAPL
    - name: server_energy_consumption_joules
      unit: Energy
      description: Total energy consumption of the server measured via IPMI
x-tagGroups:
- name: Facility Registry API
  tags:
  - Supported Time Series Metrics for Facilities
  - facility-api.spec_other
- name: Rack Registry API
  tags:
  - Supported Time Series Metrics for Racks
  - rack-api.spec_other
- name: Server Registry API
  tags:
  - Supported Time Series Metrics for Servers
  - server-api.spec_other
